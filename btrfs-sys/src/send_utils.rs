/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __GENTOO_NOT_FREESTANDING: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _BYTESWAP_H: u32 = 1;
pub const __BITS_PER_LONG: u32 = 64;
pub const MAX_ERRNO: u32 = 4095;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const BTRFS_IOCTL_MAGIC: u32 = 148;
pub const BTRFS_VOL_NAME_MAX: u32 = 255;
pub const BTRFS_PATH_NAME_MAX: u32 = 4087;
pub const BTRFS_DEVICE_PATH_NAME_MAX: u32 = 1024;
pub const BTRFS_SUBVOL_RDONLY: u32 = 2;
pub const BTRFS_SUBVOL_QGROUP_INHERIT: u32 = 4;
pub const BTRFS_DEVICE_SPEC_BY_ID: u32 = 8;
pub const BTRFS_SUBVOL_SPEC_BY_ID: u32 = 16;
pub const BTRFS_VOL_ARG_V2_FLAGS_SUPPORTED: u32 = 30;
pub const BTRFS_FSID_SIZE: u32 = 16;
pub const BTRFS_UUID_SIZE: u32 = 16;
pub const BTRFS_QGROUP_INHERIT_SET_LIMITS: u32 = 1;
pub const BTRFS_SUBVOL_NAME_MAX: u32 = 4039;
pub const BTRFS_SCRUB_READONLY: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_CONT_READING_FROM_SRCDEV_MODE_ALWAYS: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_CONT_READING_FROM_SRCDEV_MODE_AVOID: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_NEVER_STARTED: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_STARTED: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_FINISHED: u32 = 2;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_CANCELED: u32 = 3;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_SUSPENDED: u32 = 4;
pub const BTRFS_IOCTL_DEV_REPLACE_CMD_START: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_CMD_STATUS: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_CMD_CANCEL: u32 = 2;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_NO_RESULT: i32 = -1;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_NO_ERROR: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_NOT_STARTED: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_ALREADY_STARTED: u32 = 2;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_SCRUB_INPROGRESS: u32 = 3;
pub const BTRFS_BALANCE_CTL_PAUSE: u32 = 1;
pub const BTRFS_BALANCE_CTL_CANCEL: u32 = 2;
pub const BTRFS_BALANCE_CTL_RESUME: u32 = 3;
pub const BTRFS_BALANCE_STATE_RUNNING: u32 = 1;
pub const BTRFS_BALANCE_STATE_PAUSE_REQ: u32 = 2;
pub const BTRFS_BALANCE_STATE_CANCEL_REQ: u32 = 4;
pub const BTRFS_INO_LOOKUP_PATH_MAX: u32 = 4080;
pub const BTRFS_INO_LOOKUP_USER_PATH_MAX: u32 = 3824;
pub const BTRFS_DEFRAG_RANGE_COMPRESS: u32 = 1;
pub const BTRFS_DEFRAG_RANGE_START_IO: u32 = 2;
pub const BTRFS_SAME_DATA_DIFFERS: u32 = 1;
pub const BTRFS_LOGICAL_INO_ARGS_IGNORE_OFFSET: u32 = 1;
pub const BTRFS_DEV_STATS_RESET: u32 = 1;
pub const BTRFS_QUOTA_CTL_ENABLE: u32 = 1;
pub const BTRFS_QUOTA_CTL_DISABLE: u32 = 2;
pub const BTRFS_IOC_SET_RECEIVED_SUBVOL_32_COMPAT_DEFINED: u32 = 1;
pub const BTRFS_SEND_FLAG_NO_FILE_DATA: u32 = 1;
pub const BTRFS_SEND_FLAG_OMIT_STREAM_HEADER: u32 = 2;
pub const BTRFS_SEND_FLAG_OMIT_END_CMD: u32 = 4;
pub const BTRFS_SEND_FLAG_VERSION: u32 = 8;
pub const BTRFS_SEND_FLAG_COMPRESSED: u32 = 16;
pub const BTRFS_SEND_FLAG_MASK: u32 = 31;
pub const BTRFS_IOC_SEND_64_COMPAT_DEFINED: u32 = 1;
pub const BTRFS_MAX_ROOTREF_BUFFER_NUM: u32 = 255;
pub const BTRFS_ENCODED_IO_COMPRESSION_NONE: u32 = 0;
pub const BTRFS_ENCODED_IO_COMPRESSION_ZLIB: u32 = 1;
pub const BTRFS_ENCODED_IO_COMPRESSION_ZSTD: u32 = 2;
pub const BTRFS_ENCODED_IO_COMPRESSION_LZO_4K: u32 = 3;
pub const BTRFS_ENCODED_IO_COMPRESSION_LZO_8K: u32 = 4;
pub const BTRFS_ENCODED_IO_COMPRESSION_LZO_16K: u32 = 5;
pub const BTRFS_ENCODED_IO_COMPRESSION_LZO_32K: u32 = 6;
pub const BTRFS_ENCODED_IO_COMPRESSION_LZO_64K: u32 = 7;
pub const BTRFS_ENCODED_IO_COMPRESSION_TYPES: u32 = 8;
pub const BTRFS_ENCODED_IO_ENCRYPTION_NONE: u32 = 0;
pub const BTRFS_ENCODED_IO_ENCRYPTION_TYPES: u32 = 1;
pub const BTRFS_MAGIC: u64 = 5575266562640200287;
pub const BTRFS_MAGIC_TEMPORARY: u64 = 5575266562640200225;
pub const BTRFS_MAX_MIRRORS: u32 = 3;
pub const BTRFS_MAX_LEVEL: u32 = 8;
pub const BTRFS_ROOT_TREE_OBJECTID: u32 = 1;
pub const BTRFS_EXTENT_TREE_OBJECTID: u32 = 2;
pub const BTRFS_CHUNK_TREE_OBJECTID: u32 = 3;
pub const BTRFS_DEV_TREE_OBJECTID: u32 = 4;
pub const BTRFS_FS_TREE_OBJECTID: u32 = 5;
pub const BTRFS_ROOT_TREE_DIR_OBJECTID: u32 = 6;
pub const BTRFS_CSUM_TREE_OBJECTID: u32 = 7;
pub const BTRFS_QUOTA_TREE_OBJECTID: u32 = 8;
pub const BTRFS_UUID_TREE_OBJECTID: u32 = 9;
pub const BTRFS_FREE_SPACE_TREE_OBJECTID: u32 = 10;
pub const BTRFS_BLOCK_GROUP_TREE_OBJECTID: u32 = 11;
pub const BTRFS_DEV_STATS_OBJECTID: u32 = 0;
pub const BTRFS_BALANCE_OBJECTID: i32 = -4;
pub const BTRFS_ORPHAN_OBJECTID: i32 = -5;
pub const BTRFS_TREE_LOG_OBJECTID: i32 = -6;
pub const BTRFS_TREE_LOG_FIXUP_OBJECTID: i32 = -7;
pub const BTRFS_TREE_RELOC_OBJECTID: i32 = -8;
pub const BTRFS_DATA_RELOC_TREE_OBJECTID: i32 = -9;
pub const BTRFS_EXTENT_CSUM_OBJECTID: i32 = -10;
pub const BTRFS_FREE_SPACE_OBJECTID: i32 = -11;
pub const BTRFS_FREE_INO_OBJECTID: i32 = -12;
pub const BTRFS_MULTIPLE_OBJECTIDS: i32 = -255;
pub const BTRFS_FIRST_FREE_OBJECTID: u32 = 256;
pub const BTRFS_LAST_FREE_OBJECTID: i32 = -256;
pub const BTRFS_FIRST_CHUNK_TREE_OBJECTID: u32 = 256;
pub const BTRFS_DEV_ITEMS_OBJECTID: u32 = 1;
pub const BTRFS_EMPTY_SUBVOL_DIR_OBJECTID: u32 = 2;
pub const BTRFS_MAX_METADATA_BLOCKSIZE: u32 = 65536;
pub const BTRFS_NAME_LEN: u32 = 255;
pub const BTRFS_LINK_MAX: u32 = 65535;
pub const BTRFS_CSUM_SIZE: u32 = 32;
pub const BTRFS_EMPTY_DIR_SIZE: u32 = 0;
pub const BTRFS_FT_UNKNOWN: u32 = 0;
pub const BTRFS_FT_REG_FILE: u32 = 1;
pub const BTRFS_FT_DIR: u32 = 2;
pub const BTRFS_FT_CHRDEV: u32 = 3;
pub const BTRFS_FT_BLKDEV: u32 = 4;
pub const BTRFS_FT_FIFO: u32 = 5;
pub const BTRFS_FT_SOCK: u32 = 6;
pub const BTRFS_FT_SYMLINK: u32 = 7;
pub const BTRFS_FT_XATTR: u32 = 8;
pub const BTRFS_FT_MAX: u32 = 9;
pub const BTRFS_ROOT_SUBVOL_RDONLY: u32 = 1;
pub const BTRFS_FREE_SPACE_EXTENT: u32 = 1;
pub const BTRFS_FREE_SPACE_BITMAP: u32 = 2;
pub const BTRFS_HEADER_FLAG_WRITTEN: u32 = 1;
pub const BTRFS_HEADER_FLAG_RELOC: u32 = 2;
pub const BTRFS_SUPER_FLAG_SEEDING: u64 = 4294967296;
pub const BTRFS_SUPER_FLAG_METADUMP: u64 = 8589934592;
pub const BTRFS_SUPER_FLAG_METADUMP_V2: u64 = 17179869184;
pub const BTRFS_SUPER_FLAG_CHANGING_FSID: u64 = 34359738368;
pub const BTRFS_SUPER_FLAG_CHANGING_FSID_V2: u64 = 68719476736;
pub const BTRFS_SUPER_FLAG_CHANGING_CSUM: u64 = 137438953472;
pub const BTRFS_BACKREF_REV_MAX: u32 = 256;
pub const BTRFS_BACKREF_REV_SHIFT: u32 = 56;
pub const BTRFS_OLD_BACKREF_REV: u32 = 0;
pub const BTRFS_MIXED_BACKREF_REV: u32 = 1;
pub const BTRFS_SYSTEM_CHUNK_ARRAY_SIZE: u32 = 2048;
pub const BTRFS_LABEL_SIZE: u32 = 256;
pub const BTRFS_NUM_BACKUP_ROOTS: u32 = 4;
pub const BTRFS_SUPER_INFO_OFFSET: u32 = 65536;
pub const BTRFS_SUPER_INFO_SIZE: u32 = 4096;
pub const BTRFS_FEATURE_COMPAT_RO_FREE_SPACE_TREE: u32 = 1;
pub const BTRFS_FEATURE_COMPAT_RO_FREE_SPACE_TREE_VALID: u32 = 2;
pub const BTRFS_FEATURE_INCOMPAT_MIXED_BACKREF: u32 = 1;
pub const BTRFS_FEATURE_INCOMPAT_DEFAULT_SUBVOL: u32 = 2;
pub const BTRFS_FEATURE_INCOMPAT_MIXED_GROUPS: u32 = 4;
pub const BTRFS_FEATURE_INCOMPAT_COMPRESS_LZO: u32 = 8;
pub const BTRFS_FEATURE_INCOMPAT_COMPRESS_ZSTD: u32 = 16;
pub const BTRFS_FEATURE_INCOMPAT_BIG_METADATA: u32 = 32;
pub const BTRFS_FEATURE_INCOMPAT_EXTENDED_IREF: u32 = 64;
pub const BTRFS_FEATURE_INCOMPAT_RAID56: u32 = 128;
pub const BTRFS_FEATURE_INCOMPAT_SKINNY_METADATA: u32 = 256;
pub const BTRFS_FEATURE_INCOMPAT_NO_HOLES: u32 = 512;
pub const BTRFS_FEATURE_INCOMPAT_METADATA_UUID: u32 = 1024;
pub const BTRFS_FEATURE_INCOMPAT_RAID1C34: u32 = 2048;
pub const BTRFS_FEATURE_INCOMPAT_ZONED: u32 = 4096;
pub const BTRFS_FEATURE_INCOMPAT_EXTENT_TREE_V2: u32 = 8192;
pub const BTRFS_FEATURE_COMPAT_SUPP: u32 = 0;
pub const BTRFS_FEATURE_COMPAT_RO_SUPP: u32 = 3;
pub const BTRFS_FEATURE_INCOMPAT_SUPP: u32 = 8191;
pub const BTRFS_MAX_EXTENT_SIZE: u32 = 134217728;
pub const BTRFS_EXTENT_FLAG_DATA: u32 = 1;
pub const BTRFS_EXTENT_FLAG_TREE_BLOCK: u32 = 2;
pub const BTRFS_BLOCK_FLAG_FULL_BACKREF: u32 = 256;
pub const BTRFS_FILE_EXTENT_INLINE: u32 = 0;
pub const BTRFS_FILE_EXTENT_REG: u32 = 1;
pub const BTRFS_FILE_EXTENT_PREALLOC: u32 = 2;
pub const BTRFS_BLOCK_GROUP_DATA: u32 = 1;
pub const BTRFS_BLOCK_GROUP_SYSTEM: u32 = 2;
pub const BTRFS_BLOCK_GROUP_METADATA: u32 = 4;
pub const BTRFS_BLOCK_GROUP_RAID0: u32 = 8;
pub const BTRFS_BLOCK_GROUP_RAID1: u32 = 16;
pub const BTRFS_BLOCK_GROUP_DUP: u32 = 32;
pub const BTRFS_BLOCK_GROUP_RAID10: u32 = 64;
pub const BTRFS_BLOCK_GROUP_RAID5: u32 = 128;
pub const BTRFS_BLOCK_GROUP_RAID6: u32 = 256;
pub const BTRFS_BLOCK_GROUP_RAID1C3: u32 = 512;
pub const BTRFS_BLOCK_GROUP_RAID1C4: u32 = 1024;
pub const BTRFS_BLOCK_GROUP_TYPE_MASK: u32 = 7;
pub const BTRFS_BLOCK_GROUP_PROFILE_MASK: u32 = 2040;
pub const BTRFS_BLOCK_GROUP_RAID56_MASK: u32 = 384;
pub const BTRFS_BLOCK_GROUP_RAID1_MASK: u32 = 1552;
pub const BTRFS_AVAIL_ALLOC_BIT_SINGLE: u64 = 281474976710656;
pub const BTRFS_EXTENDED_PROFILE_MASK: u64 = 281474976712696;
pub const BTRFS_SPACE_INFO_GLOBAL_RSV: u64 = 562949953421312;
pub const BTRFS_QGROUP_LEVEL_SHIFT: u32 = 48;
pub const BTRFS_QGROUP_STATUS_FLAG_ON: u32 = 1;
pub const BTRFS_QGROUP_STATUS_FLAG_RESCAN: u32 = 2;
pub const BTRFS_QGROUP_STATUS_FLAG_INCONSISTENT: u32 = 4;
pub const BTRFS_QGROUP_STATUS_VERSION: u32 = 1;
pub const BTRFS_FREE_SPACE_USING_BITMAPS: u32 = 1;
pub const BTRFS_QGROUP_LIMIT_MAX_RFER: u32 = 1;
pub const BTRFS_QGROUP_LIMIT_MAX_EXCL: u32 = 2;
pub const BTRFS_QGROUP_LIMIT_RSV_RFER: u32 = 4;
pub const BTRFS_QGROUP_LIMIT_RSV_EXCL: u32 = 8;
pub const BTRFS_QGROUP_LIMIT_RFER_CMPR: u32 = 16;
pub const BTRFS_QGROUP_LIMIT_EXCL_CMPR: u32 = 32;
pub const BTRFS_INODE_ITEM_KEY: u32 = 1;
pub const BTRFS_INODE_REF_KEY: u32 = 12;
pub const BTRFS_INODE_EXTREF_KEY: u32 = 13;
pub const BTRFS_XATTR_ITEM_KEY: u32 = 24;
pub const BTRFS_VERITY_DESC_ITEM_KEY: u32 = 36;
pub const BTRFS_VERITY_MERKLE_ITEM_KEY: u32 = 37;
pub const BTRFS_ORPHAN_ITEM_KEY: u32 = 48;
pub const BTRFS_DIR_LOG_ITEM_KEY: u32 = 60;
pub const BTRFS_DIR_LOG_INDEX_KEY: u32 = 72;
pub const BTRFS_DIR_ITEM_KEY: u32 = 84;
pub const BTRFS_DIR_INDEX_KEY: u32 = 96;
pub const BTRFS_EXTENT_DATA_KEY: u32 = 108;
pub const BTRFS_CSUM_ITEM_KEY: u32 = 120;
pub const BTRFS_EXTENT_CSUM_KEY: u32 = 128;
pub const BTRFS_ROOT_ITEM_KEY: u32 = 132;
pub const BTRFS_ROOT_BACKREF_KEY: u32 = 144;
pub const BTRFS_ROOT_REF_KEY: u32 = 156;
pub const BTRFS_EXTENT_ITEM_KEY: u32 = 168;
pub const BTRFS_METADATA_ITEM_KEY: u32 = 169;
pub const BTRFS_TREE_BLOCK_REF_KEY: u32 = 176;
pub const BTRFS_EXTENT_DATA_REF_KEY: u32 = 178;
pub const BTRFS_EXTENT_REF_V0_KEY: u32 = 180;
pub const BTRFS_SHARED_BLOCK_REF_KEY: u32 = 182;
pub const BTRFS_SHARED_DATA_REF_KEY: u32 = 184;
pub const BTRFS_BLOCK_GROUP_ITEM_KEY: u32 = 192;
pub const BTRFS_FREE_SPACE_INFO_KEY: u32 = 198;
pub const BTRFS_FREE_SPACE_EXTENT_KEY: u32 = 199;
pub const BTRFS_FREE_SPACE_BITMAP_KEY: u32 = 200;
pub const BTRFS_DEV_EXTENT_KEY: u32 = 204;
pub const BTRFS_DEV_ITEM_KEY: u32 = 216;
pub const BTRFS_CHUNK_ITEM_KEY: u32 = 228;
pub const BTRFS_BALANCE_ITEM_KEY: u32 = 248;
pub const BTRFS_QGROUP_STATUS_KEY: u32 = 240;
pub const BTRFS_QGROUP_INFO_KEY: u32 = 242;
pub const BTRFS_QGROUP_LIMIT_KEY: u32 = 244;
pub const BTRFS_QGROUP_RELATION_KEY: u32 = 246;
pub const BTRFS_TEMPORARY_ITEM_KEY: u32 = 248;
pub const BTRFS_DEV_STATS_KEY: u32 = 249;
pub const BTRFS_PERSISTENT_ITEM_KEY: u32 = 249;
pub const BTRFS_DEV_REPLACE_KEY: u32 = 250;
pub const BTRFS_UUID_KEY_SUBVOL: u32 = 251;
pub const BTRFS_UUID_KEY_RECEIVED_SUBVOL: u32 = 252;
pub const BTRFS_STRING_ITEM_KEY: u32 = 253;
pub const BTRFS_INODE_NODATASUM: u32 = 1;
pub const BTRFS_INODE_NODATACOW: u32 = 2;
pub const BTRFS_INODE_READONLY: u32 = 4;
pub const BTRFS_INODE_NOCOMPRESS: u32 = 8;
pub const BTRFS_INODE_PREALLOC: u32 = 16;
pub const BTRFS_INODE_SYNC: u32 = 32;
pub const BTRFS_INODE_IMMUTABLE: u32 = 64;
pub const BTRFS_INODE_APPEND: u32 = 128;
pub const BTRFS_INODE_NODUMP: u32 = 256;
pub const BTRFS_INODE_NOATIME: u32 = 512;
pub const BTRFS_INODE_DIRSYNC: u32 = 1024;
pub const BTRFS_INODE_COMPRESS: u32 = 2048;
pub const BTRFS_COMPAT_SEND_NO_UUID_TREE: u32 = 1;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::_prevchain"]
        [::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __size: usize);
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type u32_ = __u32;
pub type u64_ = __u64;
pub type u16_ = __u16;
pub type u8_ = __u8;
pub type s64 = __s64;
pub type s32 = __s32;
pub type __le16 = u16_;
pub type __be16 = u16_;
pub type __le32 = u32_;
pub type __be32 = u32_;
pub type __le64 = u64_;
pub type __be64 = u64_;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __una_u16 {
    pub x: __le16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __una_u16"][::std::mem::size_of::<__una_u16>() - 2usize];
    ["Alignment of __una_u16"][::std::mem::align_of::<__una_u16>() - 1usize];
    ["Offset of field: __una_u16::x"][::std::mem::offset_of!(__una_u16, x) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __una_u32 {
    pub x: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __una_u32"][::std::mem::size_of::<__una_u32>() - 4usize];
    ["Alignment of __una_u32"][::std::mem::align_of::<__una_u32>() - 1usize];
    ["Offset of field: __una_u32::x"][::std::mem::offset_of!(__una_u32, x) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __una_u64 {
    pub x: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __una_u64"][::std::mem::size_of::<__una_u64>() - 8usize];
    ["Alignment of __una_u64"][::std::mem::align_of::<__una_u64>() - 1usize];
    ["Offset of field: __una_u64::x"][::std::mem::offset_of!(__una_u64, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_node {
    pub __rb_parent_color: ::std::os::raw::c_ulong,
    pub rb_right: *mut rb_node,
    pub rb_left: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rb_node"][::std::mem::size_of::<rb_node>() - 24usize];
    ["Alignment of rb_node"][::std::mem::align_of::<rb_node>() - 8usize];
    ["Offset of field: rb_node::__rb_parent_color"]
        [::std::mem::offset_of!(rb_node, __rb_parent_color) - 0usize];
    ["Offset of field: rb_node::rb_right"][::std::mem::offset_of!(rb_node, rb_right) - 8usize];
    ["Offset of field: rb_node::rb_left"][::std::mem::offset_of!(rb_node, rb_left) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_root {
    pub rb_node: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rb_root"][::std::mem::size_of::<rb_root>() - 8usize];
    ["Alignment of rb_root"][::std::mem::align_of::<rb_root>() - 8usize];
    ["Offset of field: rb_root::rb_node"][::std::mem::offset_of!(rb_root, rb_node) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_root_cached {
    pub rb_root: rb_root,
    pub rb_leftmost: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rb_root_cached"][::std::mem::size_of::<rb_root_cached>() - 16usize];
    ["Alignment of rb_root_cached"][::std::mem::align_of::<rb_root_cached>() - 8usize];
    ["Offset of field: rb_root_cached::rb_root"]
        [::std::mem::offset_of!(rb_root_cached, rb_root) - 0usize];
    ["Offset of field: rb_root_cached::rb_leftmost"]
        [::std::mem::offset_of!(rb_root_cached, rb_leftmost) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_vol_args {
    pub fd: __s64,
    pub name: [::std::os::raw::c_char; 4088usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_vol_args"][::std::mem::size_of::<btrfs_ioctl_vol_args>() - 4096usize];
    ["Alignment of btrfs_ioctl_vol_args"][::std::mem::align_of::<btrfs_ioctl_vol_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_vol_args::fd"]
        [::std::mem::offset_of!(btrfs_ioctl_vol_args, fd) - 0usize];
    ["Offset of field: btrfs_ioctl_vol_args::name"]
        [::std::mem::offset_of!(btrfs_ioctl_vol_args, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_qgroup_limit {
    pub flags: __u64,
    pub max_referenced: __u64,
    pub max_exclusive: __u64,
    pub rsv_referenced: __u64,
    pub rsv_exclusive: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_qgroup_limit"][::std::mem::size_of::<btrfs_qgroup_limit>() - 40usize];
    ["Alignment of btrfs_qgroup_limit"][::std::mem::align_of::<btrfs_qgroup_limit>() - 8usize];
    ["Offset of field: btrfs_qgroup_limit::flags"]
        [::std::mem::offset_of!(btrfs_qgroup_limit, flags) - 0usize];
    ["Offset of field: btrfs_qgroup_limit::max_referenced"]
        [::std::mem::offset_of!(btrfs_qgroup_limit, max_referenced) - 8usize];
    ["Offset of field: btrfs_qgroup_limit::max_exclusive"]
        [::std::mem::offset_of!(btrfs_qgroup_limit, max_exclusive) - 16usize];
    ["Offset of field: btrfs_qgroup_limit::rsv_referenced"]
        [::std::mem::offset_of!(btrfs_qgroup_limit, rsv_referenced) - 24usize];
    ["Offset of field: btrfs_qgroup_limit::rsv_exclusive"]
        [::std::mem::offset_of!(btrfs_qgroup_limit, rsv_exclusive) - 32usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct btrfs_qgroup_inherit {
    pub flags: __u64,
    pub num_qgroups: __u64,
    pub num_ref_copies: __u64,
    pub num_excl_copies: __u64,
    pub lim: btrfs_qgroup_limit,
    pub qgroups: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_qgroup_inherit"][::std::mem::size_of::<btrfs_qgroup_inherit>() - 72usize];
    ["Alignment of btrfs_qgroup_inherit"][::std::mem::align_of::<btrfs_qgroup_inherit>() - 8usize];
    ["Offset of field: btrfs_qgroup_inherit::flags"]
        [::std::mem::offset_of!(btrfs_qgroup_inherit, flags) - 0usize];
    ["Offset of field: btrfs_qgroup_inherit::num_qgroups"]
        [::std::mem::offset_of!(btrfs_qgroup_inherit, num_qgroups) - 8usize];
    ["Offset of field: btrfs_qgroup_inherit::num_ref_copies"]
        [::std::mem::offset_of!(btrfs_qgroup_inherit, num_ref_copies) - 16usize];
    ["Offset of field: btrfs_qgroup_inherit::num_excl_copies"]
        [::std::mem::offset_of!(btrfs_qgroup_inherit, num_excl_copies) - 24usize];
    ["Offset of field: btrfs_qgroup_inherit::lim"]
        [::std::mem::offset_of!(btrfs_qgroup_inherit, lim) - 32usize];
    ["Offset of field: btrfs_qgroup_inherit::qgroups"]
        [::std::mem::offset_of!(btrfs_qgroup_inherit, qgroups) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_qgroup_limit_args {
    pub qgroupid: __u64,
    pub lim: btrfs_qgroup_limit,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_qgroup_limit_args"]
        [::std::mem::size_of::<btrfs_ioctl_qgroup_limit_args>() - 48usize];
    ["Alignment of btrfs_ioctl_qgroup_limit_args"]
        [::std::mem::align_of::<btrfs_ioctl_qgroup_limit_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_qgroup_limit_args::qgroupid"]
        [::std::mem::offset_of!(btrfs_ioctl_qgroup_limit_args, qgroupid) - 0usize];
    ["Offset of field: btrfs_ioctl_qgroup_limit_args::lim"]
        [::std::mem::offset_of!(btrfs_ioctl_qgroup_limit_args, lim) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btrfs_ioctl_vol_args_v2 {
    pub fd: __s64,
    pub transid: __u64,
    pub flags: __u64,
    pub __bindgen_anon_1: btrfs_ioctl_vol_args_v2__bindgen_ty_1,
    pub __bindgen_anon_2: btrfs_ioctl_vol_args_v2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_ioctl_vol_args_v2__bindgen_ty_1 {
    pub __bindgen_anon_1: btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1,
    pub unused: [__u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1 {
    pub size: __u64,
    pub qgroup_inherit: *mut btrfs_qgroup_inherit,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1,
        size
    ) - 0usize];
    ["Offset of field: btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1::qgroup_inherit"][::std::mem::offset_of!(
        btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1,
        qgroup_inherit
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_vol_args_v2__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1>() - 32usize];
    ["Alignment of btrfs_ioctl_vol_args_v2__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1>() - 8usize];
    ["Offset of field: btrfs_ioctl_vol_args_v2__bindgen_ty_1::unused"]
        [::std::mem::offset_of!(btrfs_ioctl_vol_args_v2__bindgen_ty_1, unused) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_ioctl_vol_args_v2__bindgen_ty_2 {
    pub name: [::std::os::raw::c_char; 4040usize],
    pub devid: __u64,
    pub subvolid: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_vol_args_v2__bindgen_ty_2"]
        [::std::mem::size_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_2>() - 4040usize];
    ["Alignment of btrfs_ioctl_vol_args_v2__bindgen_ty_2"]
        [::std::mem::align_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_2>() - 8usize];
    ["Offset of field: btrfs_ioctl_vol_args_v2__bindgen_ty_2::name"]
        [::std::mem::offset_of!(btrfs_ioctl_vol_args_v2__bindgen_ty_2, name) - 0usize];
    ["Offset of field: btrfs_ioctl_vol_args_v2__bindgen_ty_2::devid"]
        [::std::mem::offset_of!(btrfs_ioctl_vol_args_v2__bindgen_ty_2, devid) - 0usize];
    ["Offset of field: btrfs_ioctl_vol_args_v2__bindgen_ty_2::subvolid"]
        [::std::mem::offset_of!(btrfs_ioctl_vol_args_v2__bindgen_ty_2, subvolid) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_vol_args_v2"]
        [::std::mem::size_of::<btrfs_ioctl_vol_args_v2>() - 4096usize];
    ["Alignment of btrfs_ioctl_vol_args_v2"]
        [::std::mem::align_of::<btrfs_ioctl_vol_args_v2>() - 8usize];
    ["Offset of field: btrfs_ioctl_vol_args_v2::fd"]
        [::std::mem::offset_of!(btrfs_ioctl_vol_args_v2, fd) - 0usize];
    ["Offset of field: btrfs_ioctl_vol_args_v2::transid"]
        [::std::mem::offset_of!(btrfs_ioctl_vol_args_v2, transid) - 8usize];
    ["Offset of field: btrfs_ioctl_vol_args_v2::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_vol_args_v2, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_scrub_progress {
    pub data_extents_scrubbed: __u64,
    pub tree_extents_scrubbed: __u64,
    pub data_bytes_scrubbed: __u64,
    pub tree_bytes_scrubbed: __u64,
    pub read_errors: __u64,
    pub csum_errors: __u64,
    pub verify_errors: __u64,
    pub no_csum: __u64,
    pub csum_discards: __u64,
    pub super_errors: __u64,
    pub malloc_errors: __u64,
    pub uncorrectable_errors: __u64,
    pub corrected_errors: __u64,
    pub last_physical: __u64,
    pub unverified_errors: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_scrub_progress"][::std::mem::size_of::<btrfs_scrub_progress>() - 120usize];
    ["Alignment of btrfs_scrub_progress"][::std::mem::align_of::<btrfs_scrub_progress>() - 8usize];
    ["Offset of field: btrfs_scrub_progress::data_extents_scrubbed"]
        [::std::mem::offset_of!(btrfs_scrub_progress, data_extents_scrubbed) - 0usize];
    ["Offset of field: btrfs_scrub_progress::tree_extents_scrubbed"]
        [::std::mem::offset_of!(btrfs_scrub_progress, tree_extents_scrubbed) - 8usize];
    ["Offset of field: btrfs_scrub_progress::data_bytes_scrubbed"]
        [::std::mem::offset_of!(btrfs_scrub_progress, data_bytes_scrubbed) - 16usize];
    ["Offset of field: btrfs_scrub_progress::tree_bytes_scrubbed"]
        [::std::mem::offset_of!(btrfs_scrub_progress, tree_bytes_scrubbed) - 24usize];
    ["Offset of field: btrfs_scrub_progress::read_errors"]
        [::std::mem::offset_of!(btrfs_scrub_progress, read_errors) - 32usize];
    ["Offset of field: btrfs_scrub_progress::csum_errors"]
        [::std::mem::offset_of!(btrfs_scrub_progress, csum_errors) - 40usize];
    ["Offset of field: btrfs_scrub_progress::verify_errors"]
        [::std::mem::offset_of!(btrfs_scrub_progress, verify_errors) - 48usize];
    ["Offset of field: btrfs_scrub_progress::no_csum"]
        [::std::mem::offset_of!(btrfs_scrub_progress, no_csum) - 56usize];
    ["Offset of field: btrfs_scrub_progress::csum_discards"]
        [::std::mem::offset_of!(btrfs_scrub_progress, csum_discards) - 64usize];
    ["Offset of field: btrfs_scrub_progress::super_errors"]
        [::std::mem::offset_of!(btrfs_scrub_progress, super_errors) - 72usize];
    ["Offset of field: btrfs_scrub_progress::malloc_errors"]
        [::std::mem::offset_of!(btrfs_scrub_progress, malloc_errors) - 80usize];
    ["Offset of field: btrfs_scrub_progress::uncorrectable_errors"]
        [::std::mem::offset_of!(btrfs_scrub_progress, uncorrectable_errors) - 88usize];
    ["Offset of field: btrfs_scrub_progress::corrected_errors"]
        [::std::mem::offset_of!(btrfs_scrub_progress, corrected_errors) - 96usize];
    ["Offset of field: btrfs_scrub_progress::last_physical"]
        [::std::mem::offset_of!(btrfs_scrub_progress, last_physical) - 104usize];
    ["Offset of field: btrfs_scrub_progress::unverified_errors"]
        [::std::mem::offset_of!(btrfs_scrub_progress, unverified_errors) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_scrub_args {
    pub devid: __u64,
    pub start: __u64,
    pub end: __u64,
    pub flags: __u64,
    pub progress: btrfs_scrub_progress,
    pub unused: [__u64; 109usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_scrub_args"][::std::mem::size_of::<btrfs_ioctl_scrub_args>() - 1024usize];
    ["Alignment of btrfs_ioctl_scrub_args"]
        [::std::mem::align_of::<btrfs_ioctl_scrub_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_scrub_args::devid"]
        [::std::mem::offset_of!(btrfs_ioctl_scrub_args, devid) - 0usize];
    ["Offset of field: btrfs_ioctl_scrub_args::start"]
        [::std::mem::offset_of!(btrfs_ioctl_scrub_args, start) - 8usize];
    ["Offset of field: btrfs_ioctl_scrub_args::end"]
        [::std::mem::offset_of!(btrfs_ioctl_scrub_args, end) - 16usize];
    ["Offset of field: btrfs_ioctl_scrub_args::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_scrub_args, flags) - 24usize];
    ["Offset of field: btrfs_ioctl_scrub_args::progress"]
        [::std::mem::offset_of!(btrfs_ioctl_scrub_args, progress) - 32usize];
    ["Offset of field: btrfs_ioctl_scrub_args::unused"]
        [::std::mem::offset_of!(btrfs_ioctl_scrub_args, unused) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_dev_replace_start_params {
    pub srcdevid: __u64,
    pub cont_reading_from_srcdev_mode: __u64,
    pub srcdev_name: [__u8; 1025usize],
    pub tgtdev_name: [__u8; 1025usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_dev_replace_start_params"]
        [::std::mem::size_of::<btrfs_ioctl_dev_replace_start_params>() - 2072usize];
    ["Alignment of btrfs_ioctl_dev_replace_start_params"]
        [::std::mem::align_of::<btrfs_ioctl_dev_replace_start_params>() - 8usize];
    ["Offset of field: btrfs_ioctl_dev_replace_start_params::srcdevid"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_start_params, srcdevid) - 0usize];
    ["Offset of field: btrfs_ioctl_dev_replace_start_params::cont_reading_from_srcdev_mode"][::std::mem::offset_of!(
        btrfs_ioctl_dev_replace_start_params,
        cont_reading_from_srcdev_mode
    )
        - 8usize];
    ["Offset of field: btrfs_ioctl_dev_replace_start_params::srcdev_name"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_start_params, srcdev_name) - 16usize];
    ["Offset of field: btrfs_ioctl_dev_replace_start_params::tgtdev_name"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_start_params, tgtdev_name) - 1041usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_dev_replace_status_params {
    pub replace_state: __u64,
    pub progress_1000: __u64,
    pub time_started: __u64,
    pub time_stopped: __u64,
    pub num_write_errors: __u64,
    pub num_uncorrectable_read_errors: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_dev_replace_status_params"]
        [::std::mem::size_of::<btrfs_ioctl_dev_replace_status_params>() - 48usize];
    ["Alignment of btrfs_ioctl_dev_replace_status_params"]
        [::std::mem::align_of::<btrfs_ioctl_dev_replace_status_params>() - 8usize];
    ["Offset of field: btrfs_ioctl_dev_replace_status_params::replace_state"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_status_params, replace_state) - 0usize];
    ["Offset of field: btrfs_ioctl_dev_replace_status_params::progress_1000"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_status_params, progress_1000) - 8usize];
    ["Offset of field: btrfs_ioctl_dev_replace_status_params::time_started"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_status_params, time_started) - 16usize];
    ["Offset of field: btrfs_ioctl_dev_replace_status_params::time_stopped"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_status_params, time_stopped) - 24usize];
    ["Offset of field: btrfs_ioctl_dev_replace_status_params::num_write_errors"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_status_params, num_write_errors) - 32usize];
    ["Offset of field: btrfs_ioctl_dev_replace_status_params::num_uncorrectable_read_errors"][::std::mem::offset_of!(
        btrfs_ioctl_dev_replace_status_params,
        num_uncorrectable_read_errors
    )
        - 40usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btrfs_ioctl_dev_replace_args {
    pub cmd: __u64,
    pub result: __u64,
    pub __bindgen_anon_1: btrfs_ioctl_dev_replace_args__bindgen_ty_1,
    pub spare: [__u64; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_ioctl_dev_replace_args__bindgen_ty_1 {
    pub start: btrfs_ioctl_dev_replace_start_params,
    pub status: btrfs_ioctl_dev_replace_status_params,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_dev_replace_args__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_ioctl_dev_replace_args__bindgen_ty_1>() - 2072usize];
    ["Alignment of btrfs_ioctl_dev_replace_args__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_ioctl_dev_replace_args__bindgen_ty_1>() - 8usize];
    ["Offset of field: btrfs_ioctl_dev_replace_args__bindgen_ty_1::start"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_args__bindgen_ty_1, start) - 0usize];
    ["Offset of field: btrfs_ioctl_dev_replace_args__bindgen_ty_1::status"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_args__bindgen_ty_1, status) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_dev_replace_args"]
        [::std::mem::size_of::<btrfs_ioctl_dev_replace_args>() - 2600usize];
    ["Alignment of btrfs_ioctl_dev_replace_args"]
        [::std::mem::align_of::<btrfs_ioctl_dev_replace_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_dev_replace_args::cmd"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_args, cmd) - 0usize];
    ["Offset of field: btrfs_ioctl_dev_replace_args::result"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_args, result) - 8usize];
    ["Offset of field: btrfs_ioctl_dev_replace_args::spare"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_replace_args, spare) - 2088usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_dev_info_args {
    pub devid: __u64,
    pub uuid: [__u8; 16usize],
    pub bytes_used: __u64,
    pub total_bytes: __u64,
    pub unused: [__u64; 379usize],
    pub path: [__u8; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_dev_info_args"]
        [::std::mem::size_of::<btrfs_ioctl_dev_info_args>() - 4096usize];
    ["Alignment of btrfs_ioctl_dev_info_args"]
        [::std::mem::align_of::<btrfs_ioctl_dev_info_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_dev_info_args::devid"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_info_args, devid) - 0usize];
    ["Offset of field: btrfs_ioctl_dev_info_args::uuid"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_info_args, uuid) - 8usize];
    ["Offset of field: btrfs_ioctl_dev_info_args::bytes_used"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_info_args, bytes_used) - 24usize];
    ["Offset of field: btrfs_ioctl_dev_info_args::total_bytes"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_info_args, total_bytes) - 32usize];
    ["Offset of field: btrfs_ioctl_dev_info_args::unused"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_info_args, unused) - 40usize];
    ["Offset of field: btrfs_ioctl_dev_info_args::path"]
        [::std::mem::offset_of!(btrfs_ioctl_dev_info_args, path) - 3072usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_fs_info_args {
    pub max_id: __u64,
    pub num_devices: __u64,
    pub fsid: [__u8; 16usize],
    pub nodesize: __u32,
    pub sectorsize: __u32,
    pub clone_alignment: __u32,
    pub reserved32: __u32,
    pub reserved: [__u64; 122usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_fs_info_args"]
        [::std::mem::size_of::<btrfs_ioctl_fs_info_args>() - 1024usize];
    ["Alignment of btrfs_ioctl_fs_info_args"]
        [::std::mem::align_of::<btrfs_ioctl_fs_info_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_fs_info_args::max_id"]
        [::std::mem::offset_of!(btrfs_ioctl_fs_info_args, max_id) - 0usize];
    ["Offset of field: btrfs_ioctl_fs_info_args::num_devices"]
        [::std::mem::offset_of!(btrfs_ioctl_fs_info_args, num_devices) - 8usize];
    ["Offset of field: btrfs_ioctl_fs_info_args::fsid"]
        [::std::mem::offset_of!(btrfs_ioctl_fs_info_args, fsid) - 16usize];
    ["Offset of field: btrfs_ioctl_fs_info_args::nodesize"]
        [::std::mem::offset_of!(btrfs_ioctl_fs_info_args, nodesize) - 32usize];
    ["Offset of field: btrfs_ioctl_fs_info_args::sectorsize"]
        [::std::mem::offset_of!(btrfs_ioctl_fs_info_args, sectorsize) - 36usize];
    ["Offset of field: btrfs_ioctl_fs_info_args::clone_alignment"]
        [::std::mem::offset_of!(btrfs_ioctl_fs_info_args, clone_alignment) - 40usize];
    ["Offset of field: btrfs_ioctl_fs_info_args::reserved32"]
        [::std::mem::offset_of!(btrfs_ioctl_fs_info_args, reserved32) - 44usize];
    ["Offset of field: btrfs_ioctl_fs_info_args::reserved"]
        [::std::mem::offset_of!(btrfs_ioctl_fs_info_args, reserved) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_feature_flags {
    pub compat_flags: __u64,
    pub compat_ro_flags: __u64,
    pub incompat_flags: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_feature_flags"]
        [::std::mem::size_of::<btrfs_ioctl_feature_flags>() - 24usize];
    ["Alignment of btrfs_ioctl_feature_flags"]
        [::std::mem::align_of::<btrfs_ioctl_feature_flags>() - 8usize];
    ["Offset of field: btrfs_ioctl_feature_flags::compat_flags"]
        [::std::mem::offset_of!(btrfs_ioctl_feature_flags, compat_flags) - 0usize];
    ["Offset of field: btrfs_ioctl_feature_flags::compat_ro_flags"]
        [::std::mem::offset_of!(btrfs_ioctl_feature_flags, compat_ro_flags) - 8usize];
    ["Offset of field: btrfs_ioctl_feature_flags::incompat_flags"]
        [::std::mem::offset_of!(btrfs_ioctl_feature_flags, incompat_flags) - 16usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct btrfs_balance_args {
    pub profiles: __u64,
    pub __bindgen_anon_1: btrfs_balance_args__bindgen_ty_1,
    pub devid: __u64,
    pub pstart: __u64,
    pub pend: __u64,
    pub vstart: __u64,
    pub vend: __u64,
    pub target: __u64,
    pub flags: __u64,
    pub __bindgen_anon_2: btrfs_balance_args__bindgen_ty_2,
    pub stripes_min: __u32,
    pub stripes_max: __u32,
    pub unused: [__u64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_balance_args__bindgen_ty_1 {
    pub usage: __u64,
    pub __bindgen_anon_1: btrfs_balance_args__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_balance_args__bindgen_ty_1__bindgen_ty_1 {
    pub usage_min: __u32,
    pub usage_max: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_balance_args__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_balance_args__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of btrfs_balance_args__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_balance_args__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: btrfs_balance_args__bindgen_ty_1__bindgen_ty_1::usage_min"][::std::mem::offset_of!(
        btrfs_balance_args__bindgen_ty_1__bindgen_ty_1,
        usage_min
    ) - 0usize];
    ["Offset of field: btrfs_balance_args__bindgen_ty_1__bindgen_ty_1::usage_max"][::std::mem::offset_of!(
        btrfs_balance_args__bindgen_ty_1__bindgen_ty_1,
        usage_max
    ) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_balance_args__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_balance_args__bindgen_ty_1>() - 8usize];
    ["Alignment of btrfs_balance_args__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_balance_args__bindgen_ty_1>() - 8usize];
    ["Offset of field: btrfs_balance_args__bindgen_ty_1::usage"]
        [::std::mem::offset_of!(btrfs_balance_args__bindgen_ty_1, usage) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_balance_args__bindgen_ty_2 {
    pub limit: __u64,
    pub __bindgen_anon_1: btrfs_balance_args__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_balance_args__bindgen_ty_2__bindgen_ty_1 {
    pub limit_min: __u32,
    pub limit_max: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_balance_args__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_balance_args__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of btrfs_balance_args__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_balance_args__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Offset of field: btrfs_balance_args__bindgen_ty_2__bindgen_ty_1::limit_min"][::std::mem::offset_of!(
        btrfs_balance_args__bindgen_ty_2__bindgen_ty_1,
        limit_min
    ) - 0usize];
    ["Offset of field: btrfs_balance_args__bindgen_ty_2__bindgen_ty_1::limit_max"][::std::mem::offset_of!(
        btrfs_balance_args__bindgen_ty_2__bindgen_ty_1,
        limit_max
    ) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_balance_args__bindgen_ty_2"]
        [::std::mem::size_of::<btrfs_balance_args__bindgen_ty_2>() - 8usize];
    ["Alignment of btrfs_balance_args__bindgen_ty_2"]
        [::std::mem::align_of::<btrfs_balance_args__bindgen_ty_2>() - 8usize];
    ["Offset of field: btrfs_balance_args__bindgen_ty_2::limit"]
        [::std::mem::offset_of!(btrfs_balance_args__bindgen_ty_2, limit) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_balance_args"][::std::mem::size_of::<btrfs_balance_args>() - 136usize];
    ["Alignment of btrfs_balance_args"][::std::mem::align_of::<btrfs_balance_args>() - 1usize];
    ["Offset of field: btrfs_balance_args::profiles"]
        [::std::mem::offset_of!(btrfs_balance_args, profiles) - 0usize];
    ["Offset of field: btrfs_balance_args::devid"]
        [::std::mem::offset_of!(btrfs_balance_args, devid) - 16usize];
    ["Offset of field: btrfs_balance_args::pstart"]
        [::std::mem::offset_of!(btrfs_balance_args, pstart) - 24usize];
    ["Offset of field: btrfs_balance_args::pend"]
        [::std::mem::offset_of!(btrfs_balance_args, pend) - 32usize];
    ["Offset of field: btrfs_balance_args::vstart"]
        [::std::mem::offset_of!(btrfs_balance_args, vstart) - 40usize];
    ["Offset of field: btrfs_balance_args::vend"]
        [::std::mem::offset_of!(btrfs_balance_args, vend) - 48usize];
    ["Offset of field: btrfs_balance_args::target"]
        [::std::mem::offset_of!(btrfs_balance_args, target) - 56usize];
    ["Offset of field: btrfs_balance_args::flags"]
        [::std::mem::offset_of!(btrfs_balance_args, flags) - 64usize];
    ["Offset of field: btrfs_balance_args::stripes_min"]
        [::std::mem::offset_of!(btrfs_balance_args, stripes_min) - 80usize];
    ["Offset of field: btrfs_balance_args::stripes_max"]
        [::std::mem::offset_of!(btrfs_balance_args, stripes_max) - 84usize];
    ["Offset of field: btrfs_balance_args::unused"]
        [::std::mem::offset_of!(btrfs_balance_args, unused) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_balance_progress {
    pub expected: __u64,
    pub considered: __u64,
    pub completed: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_balance_progress"][::std::mem::size_of::<btrfs_balance_progress>() - 24usize];
    ["Alignment of btrfs_balance_progress"]
        [::std::mem::align_of::<btrfs_balance_progress>() - 8usize];
    ["Offset of field: btrfs_balance_progress::expected"]
        [::std::mem::offset_of!(btrfs_balance_progress, expected) - 0usize];
    ["Offset of field: btrfs_balance_progress::considered"]
        [::std::mem::offset_of!(btrfs_balance_progress, considered) - 8usize];
    ["Offset of field: btrfs_balance_progress::completed"]
        [::std::mem::offset_of!(btrfs_balance_progress, completed) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btrfs_ioctl_balance_args {
    pub flags: __u64,
    pub state: __u64,
    pub data: btrfs_balance_args,
    pub meta: btrfs_balance_args,
    pub sys: btrfs_balance_args,
    pub stat: btrfs_balance_progress,
    pub unused: [__u64; 72usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_balance_args"]
        [::std::mem::size_of::<btrfs_ioctl_balance_args>() - 1024usize];
    ["Alignment of btrfs_ioctl_balance_args"]
        [::std::mem::align_of::<btrfs_ioctl_balance_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_balance_args::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_balance_args, flags) - 0usize];
    ["Offset of field: btrfs_ioctl_balance_args::state"]
        [::std::mem::offset_of!(btrfs_ioctl_balance_args, state) - 8usize];
    ["Offset of field: btrfs_ioctl_balance_args::data"]
        [::std::mem::offset_of!(btrfs_ioctl_balance_args, data) - 16usize];
    ["Offset of field: btrfs_ioctl_balance_args::meta"]
        [::std::mem::offset_of!(btrfs_ioctl_balance_args, meta) - 152usize];
    ["Offset of field: btrfs_ioctl_balance_args::sys"]
        [::std::mem::offset_of!(btrfs_ioctl_balance_args, sys) - 288usize];
    ["Offset of field: btrfs_ioctl_balance_args::stat"]
        [::std::mem::offset_of!(btrfs_ioctl_balance_args, stat) - 424usize];
    ["Offset of field: btrfs_ioctl_balance_args::unused"]
        [::std::mem::offset_of!(btrfs_ioctl_balance_args, unused) - 448usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_ino_lookup_args {
    pub treeid: __u64,
    pub objectid: __u64,
    pub name: [::std::os::raw::c_char; 4080usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_ino_lookup_args"]
        [::std::mem::size_of::<btrfs_ioctl_ino_lookup_args>() - 4096usize];
    ["Alignment of btrfs_ioctl_ino_lookup_args"]
        [::std::mem::align_of::<btrfs_ioctl_ino_lookup_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_ino_lookup_args::treeid"]
        [::std::mem::offset_of!(btrfs_ioctl_ino_lookup_args, treeid) - 0usize];
    ["Offset of field: btrfs_ioctl_ino_lookup_args::objectid"]
        [::std::mem::offset_of!(btrfs_ioctl_ino_lookup_args, objectid) - 8usize];
    ["Offset of field: btrfs_ioctl_ino_lookup_args::name"]
        [::std::mem::offset_of!(btrfs_ioctl_ino_lookup_args, name) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_ino_lookup_user_args {
    pub dirid: __u64,
    pub treeid: __u64,
    pub name: [::std::os::raw::c_char; 256usize],
    pub path: [::std::os::raw::c_char; 3824usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_ino_lookup_user_args"]
        [::std::mem::size_of::<btrfs_ioctl_ino_lookup_user_args>() - 4096usize];
    ["Alignment of btrfs_ioctl_ino_lookup_user_args"]
        [::std::mem::align_of::<btrfs_ioctl_ino_lookup_user_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_ino_lookup_user_args::dirid"]
        [::std::mem::offset_of!(btrfs_ioctl_ino_lookup_user_args, dirid) - 0usize];
    ["Offset of field: btrfs_ioctl_ino_lookup_user_args::treeid"]
        [::std::mem::offset_of!(btrfs_ioctl_ino_lookup_user_args, treeid) - 8usize];
    ["Offset of field: btrfs_ioctl_ino_lookup_user_args::name"]
        [::std::mem::offset_of!(btrfs_ioctl_ino_lookup_user_args, name) - 16usize];
    ["Offset of field: btrfs_ioctl_ino_lookup_user_args::path"]
        [::std::mem::offset_of!(btrfs_ioctl_ino_lookup_user_args, path) - 272usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_search_key {
    pub tree_id: __u64,
    pub min_objectid: __u64,
    pub max_objectid: __u64,
    pub min_offset: __u64,
    pub max_offset: __u64,
    pub min_transid: __u64,
    pub max_transid: __u64,
    pub min_type: __u32,
    pub max_type: __u32,
    pub nr_items: __u32,
    pub unused: __u32,
    pub unused1: __u64,
    pub unused2: __u64,
    pub unused3: __u64,
    pub unused4: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_search_key"][::std::mem::size_of::<btrfs_ioctl_search_key>() - 104usize];
    ["Alignment of btrfs_ioctl_search_key"]
        [::std::mem::align_of::<btrfs_ioctl_search_key>() - 8usize];
    ["Offset of field: btrfs_ioctl_search_key::tree_id"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, tree_id) - 0usize];
    ["Offset of field: btrfs_ioctl_search_key::min_objectid"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, min_objectid) - 8usize];
    ["Offset of field: btrfs_ioctl_search_key::max_objectid"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, max_objectid) - 16usize];
    ["Offset of field: btrfs_ioctl_search_key::min_offset"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, min_offset) - 24usize];
    ["Offset of field: btrfs_ioctl_search_key::max_offset"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, max_offset) - 32usize];
    ["Offset of field: btrfs_ioctl_search_key::min_transid"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, min_transid) - 40usize];
    ["Offset of field: btrfs_ioctl_search_key::max_transid"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, max_transid) - 48usize];
    ["Offset of field: btrfs_ioctl_search_key::min_type"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, min_type) - 56usize];
    ["Offset of field: btrfs_ioctl_search_key::max_type"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, max_type) - 60usize];
    ["Offset of field: btrfs_ioctl_search_key::nr_items"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, nr_items) - 64usize];
    ["Offset of field: btrfs_ioctl_search_key::unused"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, unused) - 68usize];
    ["Offset of field: btrfs_ioctl_search_key::unused1"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, unused1) - 72usize];
    ["Offset of field: btrfs_ioctl_search_key::unused2"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, unused2) - 80usize];
    ["Offset of field: btrfs_ioctl_search_key::unused3"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, unused3) - 88usize];
    ["Offset of field: btrfs_ioctl_search_key::unused4"]
        [::std::mem::offset_of!(btrfs_ioctl_search_key, unused4) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_search_header {
    pub transid: __u64,
    pub objectid: __u64,
    pub offset: __u64,
    pub type_: __u32,
    pub len: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_search_header"]
        [::std::mem::size_of::<btrfs_ioctl_search_header>() - 32usize];
    ["Alignment of btrfs_ioctl_search_header"]
        [::std::mem::align_of::<btrfs_ioctl_search_header>() - 8usize];
    ["Offset of field: btrfs_ioctl_search_header::transid"]
        [::std::mem::offset_of!(btrfs_ioctl_search_header, transid) - 0usize];
    ["Offset of field: btrfs_ioctl_search_header::objectid"]
        [::std::mem::offset_of!(btrfs_ioctl_search_header, objectid) - 8usize];
    ["Offset of field: btrfs_ioctl_search_header::offset"]
        [::std::mem::offset_of!(btrfs_ioctl_search_header, offset) - 16usize];
    ["Offset of field: btrfs_ioctl_search_header::type_"]
        [::std::mem::offset_of!(btrfs_ioctl_search_header, type_) - 24usize];
    ["Offset of field: btrfs_ioctl_search_header::len"]
        [::std::mem::offset_of!(btrfs_ioctl_search_header, len) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_search_args {
    pub key: btrfs_ioctl_search_key,
    pub buf: [::std::os::raw::c_char; 3992usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_search_args"]
        [::std::mem::size_of::<btrfs_ioctl_search_args>() - 4096usize];
    ["Alignment of btrfs_ioctl_search_args"]
        [::std::mem::align_of::<btrfs_ioctl_search_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_search_args::key"]
        [::std::mem::offset_of!(btrfs_ioctl_search_args, key) - 0usize];
    ["Offset of field: btrfs_ioctl_search_args::buf"]
        [::std::mem::offset_of!(btrfs_ioctl_search_args, buf) - 104usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct btrfs_ioctl_search_args_v2 {
    pub key: btrfs_ioctl_search_key,
    pub buf_size: __u64,
    pub buf: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_search_args_v2"]
        [::std::mem::size_of::<btrfs_ioctl_search_args_v2>() - 112usize];
    ["Alignment of btrfs_ioctl_search_args_v2"]
        [::std::mem::align_of::<btrfs_ioctl_search_args_v2>() - 8usize];
    ["Offset of field: btrfs_ioctl_search_args_v2::key"]
        [::std::mem::offset_of!(btrfs_ioctl_search_args_v2, key) - 0usize];
    ["Offset of field: btrfs_ioctl_search_args_v2::buf_size"]
        [::std::mem::offset_of!(btrfs_ioctl_search_args_v2, buf_size) - 104usize];
    ["Offset of field: btrfs_ioctl_search_args_v2::buf"]
        [::std::mem::offset_of!(btrfs_ioctl_search_args_v2, buf) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_clone_range_args {
    pub src_fd: __s64,
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_offset: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_clone_range_args"]
        [::std::mem::size_of::<btrfs_ioctl_clone_range_args>() - 32usize];
    ["Alignment of btrfs_ioctl_clone_range_args"]
        [::std::mem::align_of::<btrfs_ioctl_clone_range_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_clone_range_args::src_fd"]
        [::std::mem::offset_of!(btrfs_ioctl_clone_range_args, src_fd) - 0usize];
    ["Offset of field: btrfs_ioctl_clone_range_args::src_offset"]
        [::std::mem::offset_of!(btrfs_ioctl_clone_range_args, src_offset) - 8usize];
    ["Offset of field: btrfs_ioctl_clone_range_args::src_length"]
        [::std::mem::offset_of!(btrfs_ioctl_clone_range_args, src_length) - 16usize];
    ["Offset of field: btrfs_ioctl_clone_range_args::dest_offset"]
        [::std::mem::offset_of!(btrfs_ioctl_clone_range_args, dest_offset) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_same_extent_info {
    pub fd: __s64,
    pub logical_offset: __u64,
    pub bytes_deduped: __u64,
    pub status: __s32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_same_extent_info"]
        [::std::mem::size_of::<btrfs_ioctl_same_extent_info>() - 32usize];
    ["Alignment of btrfs_ioctl_same_extent_info"]
        [::std::mem::align_of::<btrfs_ioctl_same_extent_info>() - 8usize];
    ["Offset of field: btrfs_ioctl_same_extent_info::fd"]
        [::std::mem::offset_of!(btrfs_ioctl_same_extent_info, fd) - 0usize];
    ["Offset of field: btrfs_ioctl_same_extent_info::logical_offset"]
        [::std::mem::offset_of!(btrfs_ioctl_same_extent_info, logical_offset) - 8usize];
    ["Offset of field: btrfs_ioctl_same_extent_info::bytes_deduped"]
        [::std::mem::offset_of!(btrfs_ioctl_same_extent_info, bytes_deduped) - 16usize];
    ["Offset of field: btrfs_ioctl_same_extent_info::status"]
        [::std::mem::offset_of!(btrfs_ioctl_same_extent_info, status) - 24usize];
    ["Offset of field: btrfs_ioctl_same_extent_info::reserved"]
        [::std::mem::offset_of!(btrfs_ioctl_same_extent_info, reserved) - 28usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct btrfs_ioctl_same_args {
    pub logical_offset: __u64,
    pub length: __u64,
    pub dest_count: __u16,
    pub reserved1: __u16,
    pub reserved2: __u32,
    pub info: __IncompleteArrayField<btrfs_ioctl_same_extent_info>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_same_args"][::std::mem::size_of::<btrfs_ioctl_same_args>() - 24usize];
    ["Alignment of btrfs_ioctl_same_args"]
        [::std::mem::align_of::<btrfs_ioctl_same_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_same_args::logical_offset"]
        [::std::mem::offset_of!(btrfs_ioctl_same_args, logical_offset) - 0usize];
    ["Offset of field: btrfs_ioctl_same_args::length"]
        [::std::mem::offset_of!(btrfs_ioctl_same_args, length) - 8usize];
    ["Offset of field: btrfs_ioctl_same_args::dest_count"]
        [::std::mem::offset_of!(btrfs_ioctl_same_args, dest_count) - 16usize];
    ["Offset of field: btrfs_ioctl_same_args::reserved1"]
        [::std::mem::offset_of!(btrfs_ioctl_same_args, reserved1) - 18usize];
    ["Offset of field: btrfs_ioctl_same_args::reserved2"]
        [::std::mem::offset_of!(btrfs_ioctl_same_args, reserved2) - 20usize];
    ["Offset of field: btrfs_ioctl_same_args::info"]
        [::std::mem::offset_of!(btrfs_ioctl_same_args, info) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_defrag_range_args {
    pub start: __u64,
    pub len: __u64,
    pub flags: __u64,
    pub extent_thresh: __u32,
    pub compress_type: __u32,
    pub unused: [__u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_defrag_range_args"]
        [::std::mem::size_of::<btrfs_ioctl_defrag_range_args>() - 48usize];
    ["Alignment of btrfs_ioctl_defrag_range_args"]
        [::std::mem::align_of::<btrfs_ioctl_defrag_range_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_defrag_range_args::start"]
        [::std::mem::offset_of!(btrfs_ioctl_defrag_range_args, start) - 0usize];
    ["Offset of field: btrfs_ioctl_defrag_range_args::len"]
        [::std::mem::offset_of!(btrfs_ioctl_defrag_range_args, len) - 8usize];
    ["Offset of field: btrfs_ioctl_defrag_range_args::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_defrag_range_args, flags) - 16usize];
    ["Offset of field: btrfs_ioctl_defrag_range_args::extent_thresh"]
        [::std::mem::offset_of!(btrfs_ioctl_defrag_range_args, extent_thresh) - 24usize];
    ["Offset of field: btrfs_ioctl_defrag_range_args::compress_type"]
        [::std::mem::offset_of!(btrfs_ioctl_defrag_range_args, compress_type) - 28usize];
    ["Offset of field: btrfs_ioctl_defrag_range_args::unused"]
        [::std::mem::offset_of!(btrfs_ioctl_defrag_range_args, unused) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_space_info {
    pub flags: __u64,
    pub total_bytes: __u64,
    pub used_bytes: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_space_info"][::std::mem::size_of::<btrfs_ioctl_space_info>() - 24usize];
    ["Alignment of btrfs_ioctl_space_info"]
        [::std::mem::align_of::<btrfs_ioctl_space_info>() - 8usize];
    ["Offset of field: btrfs_ioctl_space_info::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_space_info, flags) - 0usize];
    ["Offset of field: btrfs_ioctl_space_info::total_bytes"]
        [::std::mem::offset_of!(btrfs_ioctl_space_info, total_bytes) - 8usize];
    ["Offset of field: btrfs_ioctl_space_info::used_bytes"]
        [::std::mem::offset_of!(btrfs_ioctl_space_info, used_bytes) - 16usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct btrfs_ioctl_space_args {
    pub space_slots: __u64,
    pub total_spaces: __u64,
    pub spaces: __IncompleteArrayField<btrfs_ioctl_space_info>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_space_args"][::std::mem::size_of::<btrfs_ioctl_space_args>() - 16usize];
    ["Alignment of btrfs_ioctl_space_args"]
        [::std::mem::align_of::<btrfs_ioctl_space_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_space_args::space_slots"]
        [::std::mem::offset_of!(btrfs_ioctl_space_args, space_slots) - 0usize];
    ["Offset of field: btrfs_ioctl_space_args::total_spaces"]
        [::std::mem::offset_of!(btrfs_ioctl_space_args, total_spaces) - 8usize];
    ["Offset of field: btrfs_ioctl_space_args::spaces"]
        [::std::mem::offset_of!(btrfs_ioctl_space_args, spaces) - 16usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct btrfs_data_container {
    pub bytes_left: __u32,
    pub bytes_missing: __u32,
    pub elem_cnt: __u32,
    pub elem_missed: __u32,
    pub val: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_data_container"][::std::mem::size_of::<btrfs_data_container>() - 16usize];
    ["Alignment of btrfs_data_container"][::std::mem::align_of::<btrfs_data_container>() - 8usize];
    ["Offset of field: btrfs_data_container::bytes_left"]
        [::std::mem::offset_of!(btrfs_data_container, bytes_left) - 0usize];
    ["Offset of field: btrfs_data_container::bytes_missing"]
        [::std::mem::offset_of!(btrfs_data_container, bytes_missing) - 4usize];
    ["Offset of field: btrfs_data_container::elem_cnt"]
        [::std::mem::offset_of!(btrfs_data_container, elem_cnt) - 8usize];
    ["Offset of field: btrfs_data_container::elem_missed"]
        [::std::mem::offset_of!(btrfs_data_container, elem_missed) - 12usize];
    ["Offset of field: btrfs_data_container::val"]
        [::std::mem::offset_of!(btrfs_data_container, val) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_ino_path_args {
    pub inum: __u64,
    pub size: __u64,
    pub reserved: [__u64; 4usize],
    pub fspath: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_ino_path_args"]
        [::std::mem::size_of::<btrfs_ioctl_ino_path_args>() - 56usize];
    ["Alignment of btrfs_ioctl_ino_path_args"]
        [::std::mem::align_of::<btrfs_ioctl_ino_path_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_ino_path_args::inum"]
        [::std::mem::offset_of!(btrfs_ioctl_ino_path_args, inum) - 0usize];
    ["Offset of field: btrfs_ioctl_ino_path_args::size"]
        [::std::mem::offset_of!(btrfs_ioctl_ino_path_args, size) - 8usize];
    ["Offset of field: btrfs_ioctl_ino_path_args::reserved"]
        [::std::mem::offset_of!(btrfs_ioctl_ino_path_args, reserved) - 16usize];
    ["Offset of field: btrfs_ioctl_ino_path_args::fspath"]
        [::std::mem::offset_of!(btrfs_ioctl_ino_path_args, fspath) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_logical_ino_args {
    pub logical: __u64,
    pub size: __u64,
    pub reserved: [__u64; 3usize],
    pub flags: __u64,
    pub inodes: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_logical_ino_args"]
        [::std::mem::size_of::<btrfs_ioctl_logical_ino_args>() - 56usize];
    ["Alignment of btrfs_ioctl_logical_ino_args"]
        [::std::mem::align_of::<btrfs_ioctl_logical_ino_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_logical_ino_args::logical"]
        [::std::mem::offset_of!(btrfs_ioctl_logical_ino_args, logical) - 0usize];
    ["Offset of field: btrfs_ioctl_logical_ino_args::size"]
        [::std::mem::offset_of!(btrfs_ioctl_logical_ino_args, size) - 8usize];
    ["Offset of field: btrfs_ioctl_logical_ino_args::reserved"]
        [::std::mem::offset_of!(btrfs_ioctl_logical_ino_args, reserved) - 16usize];
    ["Offset of field: btrfs_ioctl_logical_ino_args::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_logical_ino_args, flags) - 40usize];
    ["Offset of field: btrfs_ioctl_logical_ino_args::inodes"]
        [::std::mem::offset_of!(btrfs_ioctl_logical_ino_args, inodes) - 48usize];
};
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_WRITE_ERRS: btrfs_dev_stat_values = 0;
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_READ_ERRS: btrfs_dev_stat_values = 1;
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_FLUSH_ERRS: btrfs_dev_stat_values = 2;
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_CORRUPTION_ERRS: btrfs_dev_stat_values = 3;
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_GENERATION_ERRS: btrfs_dev_stat_values = 4;
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_VALUES_MAX: btrfs_dev_stat_values = 5;
pub type btrfs_dev_stat_values = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_get_dev_stats {
    pub devid: __u64,
    pub nr_items: __u64,
    pub flags: __u64,
    pub values: [__u64; 5usize],
    pub unused: [__u64; 121usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_get_dev_stats"]
        [::std::mem::size_of::<btrfs_ioctl_get_dev_stats>() - 1032usize];
    ["Alignment of btrfs_ioctl_get_dev_stats"]
        [::std::mem::align_of::<btrfs_ioctl_get_dev_stats>() - 8usize];
    ["Offset of field: btrfs_ioctl_get_dev_stats::devid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_dev_stats, devid) - 0usize];
    ["Offset of field: btrfs_ioctl_get_dev_stats::nr_items"]
        [::std::mem::offset_of!(btrfs_ioctl_get_dev_stats, nr_items) - 8usize];
    ["Offset of field: btrfs_ioctl_get_dev_stats::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_get_dev_stats, flags) - 16usize];
    ["Offset of field: btrfs_ioctl_get_dev_stats::values"]
        [::std::mem::offset_of!(btrfs_ioctl_get_dev_stats, values) - 24usize];
    ["Offset of field: btrfs_ioctl_get_dev_stats::unused"]
        [::std::mem::offset_of!(btrfs_ioctl_get_dev_stats, unused) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_quota_ctl_args {
    pub cmd: __u64,
    pub status: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_quota_ctl_args"]
        [::std::mem::size_of::<btrfs_ioctl_quota_ctl_args>() - 16usize];
    ["Alignment of btrfs_ioctl_quota_ctl_args"]
        [::std::mem::align_of::<btrfs_ioctl_quota_ctl_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_quota_ctl_args::cmd"]
        [::std::mem::offset_of!(btrfs_ioctl_quota_ctl_args, cmd) - 0usize];
    ["Offset of field: btrfs_ioctl_quota_ctl_args::status"]
        [::std::mem::offset_of!(btrfs_ioctl_quota_ctl_args, status) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_quota_rescan_args {
    pub flags: __u64,
    pub progress: __u64,
    pub reserved: [__u64; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_quota_rescan_args"]
        [::std::mem::size_of::<btrfs_ioctl_quota_rescan_args>() - 64usize];
    ["Alignment of btrfs_ioctl_quota_rescan_args"]
        [::std::mem::align_of::<btrfs_ioctl_quota_rescan_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_quota_rescan_args::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_quota_rescan_args, flags) - 0usize];
    ["Offset of field: btrfs_ioctl_quota_rescan_args::progress"]
        [::std::mem::offset_of!(btrfs_ioctl_quota_rescan_args, progress) - 8usize];
    ["Offset of field: btrfs_ioctl_quota_rescan_args::reserved"]
        [::std::mem::offset_of!(btrfs_ioctl_quota_rescan_args, reserved) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_qgroup_assign_args {
    pub assign: __u64,
    pub src: __u64,
    pub dst: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_qgroup_assign_args"]
        [::std::mem::size_of::<btrfs_ioctl_qgroup_assign_args>() - 24usize];
    ["Alignment of btrfs_ioctl_qgroup_assign_args"]
        [::std::mem::align_of::<btrfs_ioctl_qgroup_assign_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_qgroup_assign_args::assign"]
        [::std::mem::offset_of!(btrfs_ioctl_qgroup_assign_args, assign) - 0usize];
    ["Offset of field: btrfs_ioctl_qgroup_assign_args::src"]
        [::std::mem::offset_of!(btrfs_ioctl_qgroup_assign_args, src) - 8usize];
    ["Offset of field: btrfs_ioctl_qgroup_assign_args::dst"]
        [::std::mem::offset_of!(btrfs_ioctl_qgroup_assign_args, dst) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_qgroup_create_args {
    pub create: __u64,
    pub qgroupid: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_qgroup_create_args"]
        [::std::mem::size_of::<btrfs_ioctl_qgroup_create_args>() - 16usize];
    ["Alignment of btrfs_ioctl_qgroup_create_args"]
        [::std::mem::align_of::<btrfs_ioctl_qgroup_create_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_qgroup_create_args::create"]
        [::std::mem::offset_of!(btrfs_ioctl_qgroup_create_args, create) - 0usize];
    ["Offset of field: btrfs_ioctl_qgroup_create_args::qgroupid"]
        [::std::mem::offset_of!(btrfs_ioctl_qgroup_create_args, qgroupid) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_timespec {
    pub sec: __u64,
    pub nsec: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_timespec"][::std::mem::size_of::<btrfs_ioctl_timespec>() - 16usize];
    ["Alignment of btrfs_ioctl_timespec"][::std::mem::align_of::<btrfs_ioctl_timespec>() - 8usize];
    ["Offset of field: btrfs_ioctl_timespec::sec"]
        [::std::mem::offset_of!(btrfs_ioctl_timespec, sec) - 0usize];
    ["Offset of field: btrfs_ioctl_timespec::nsec"]
        [::std::mem::offset_of!(btrfs_ioctl_timespec, nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_received_subvol_args {
    pub uuid: [::std::os::raw::c_char; 16usize],
    pub stransid: __u64,
    pub rtransid: __u64,
    pub stime: btrfs_ioctl_timespec,
    pub rtime: btrfs_ioctl_timespec,
    pub flags: __u64,
    pub reserved: [__u64; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_received_subvol_args"]
        [::std::mem::size_of::<btrfs_ioctl_received_subvol_args>() - 200usize];
    ["Alignment of btrfs_ioctl_received_subvol_args"]
        [::std::mem::align_of::<btrfs_ioctl_received_subvol_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args::uuid"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args, uuid) - 0usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args::stransid"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args, stransid) - 16usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args::rtransid"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args, rtransid) - 24usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args::stime"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args, stime) - 32usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args::rtime"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args, rtime) - 48usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args, flags) - 64usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args::reserved"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args, reserved) - 72usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_timespec_32 {
    pub sec: __u64,
    pub nsec: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_timespec_32"][::std::mem::size_of::<btrfs_ioctl_timespec_32>() - 12usize];
    ["Alignment of btrfs_ioctl_timespec_32"]
        [::std::mem::align_of::<btrfs_ioctl_timespec_32>() - 1usize];
    ["Offset of field: btrfs_ioctl_timespec_32::sec"]
        [::std::mem::offset_of!(btrfs_ioctl_timespec_32, sec) - 0usize];
    ["Offset of field: btrfs_ioctl_timespec_32::nsec"]
        [::std::mem::offset_of!(btrfs_ioctl_timespec_32, nsec) - 8usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_received_subvol_args_32 {
    pub uuid: [::std::os::raw::c_char; 16usize],
    pub stransid: __u64,
    pub rtransid: __u64,
    pub stime: btrfs_ioctl_timespec_32,
    pub rtime: btrfs_ioctl_timespec_32,
    pub flags: __u64,
    pub reserved: [__u64; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_received_subvol_args_32"]
        [::std::mem::size_of::<btrfs_ioctl_received_subvol_args_32>() - 192usize];
    ["Alignment of btrfs_ioctl_received_subvol_args_32"]
        [::std::mem::align_of::<btrfs_ioctl_received_subvol_args_32>() - 1usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args_32::uuid"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args_32, uuid) - 0usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args_32::stransid"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args_32, stransid) - 16usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args_32::rtransid"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args_32, rtransid) - 24usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args_32::stime"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args_32, stime) - 32usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args_32::rtime"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args_32, rtime) - 44usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args_32::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args_32, flags) - 56usize];
    ["Offset of field: btrfs_ioctl_received_subvol_args_32::reserved"]
        [::std::mem::offset_of!(btrfs_ioctl_received_subvol_args_32, reserved) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_send_args {
    pub send_fd: __s64,
    pub clone_sources_count: __u64,
    pub clone_sources: *mut __u64,
    pub parent_root: __u64,
    pub flags: __u64,
    pub version: __u32,
    pub reserved: [__u8; 28usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_send_args"][::std::mem::size_of::<btrfs_ioctl_send_args>() - 72usize];
    ["Alignment of btrfs_ioctl_send_args"]
        [::std::mem::align_of::<btrfs_ioctl_send_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_send_args::send_fd"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args, send_fd) - 0usize];
    ["Offset of field: btrfs_ioctl_send_args::clone_sources_count"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args, clone_sources_count) - 8usize];
    ["Offset of field: btrfs_ioctl_send_args::clone_sources"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args, clone_sources) - 16usize];
    ["Offset of field: btrfs_ioctl_send_args::parent_root"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args, parent_root) - 24usize];
    ["Offset of field: btrfs_ioctl_send_args::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args, flags) - 32usize];
    ["Offset of field: btrfs_ioctl_send_args::version"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args, version) - 40usize];
    ["Offset of field: btrfs_ioctl_send_args::reserved"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args, reserved) - 44usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct btrfs_ioctl_send_args_64 {
    pub send_fd: __s64,
    pub clone_sources_count: __u64,
    pub __bindgen_anon_1: btrfs_ioctl_send_args_64__bindgen_ty_1,
    pub parent_root: __u64,
    pub flags: __u64,
    pub reserved: [__u64; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_ioctl_send_args_64__bindgen_ty_1 {
    pub clone_sources: *mut __u64,
    pub __clone_sources_alignment: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_send_args_64__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_ioctl_send_args_64__bindgen_ty_1>() - 8usize];
    ["Alignment of btrfs_ioctl_send_args_64__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_ioctl_send_args_64__bindgen_ty_1>() - 8usize];
    ["Offset of field: btrfs_ioctl_send_args_64__bindgen_ty_1::clone_sources"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args_64__bindgen_ty_1, clone_sources) - 0usize];
    ["Offset of field: btrfs_ioctl_send_args_64__bindgen_ty_1::__clone_sources_alignment"][::std::mem::offset_of!(
        btrfs_ioctl_send_args_64__bindgen_ty_1,
        __clone_sources_alignment
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_send_args_64"]
        [::std::mem::size_of::<btrfs_ioctl_send_args_64>() - 72usize];
    ["Alignment of btrfs_ioctl_send_args_64"]
        [::std::mem::align_of::<btrfs_ioctl_send_args_64>() - 1usize];
    ["Offset of field: btrfs_ioctl_send_args_64::send_fd"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args_64, send_fd) - 0usize];
    ["Offset of field: btrfs_ioctl_send_args_64::clone_sources_count"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args_64, clone_sources_count) - 8usize];
    ["Offset of field: btrfs_ioctl_send_args_64::parent_root"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args_64, parent_root) - 24usize];
    ["Offset of field: btrfs_ioctl_send_args_64::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args_64, flags) - 32usize];
    ["Offset of field: btrfs_ioctl_send_args_64::reserved"]
        [::std::mem::offset_of!(btrfs_ioctl_send_args_64, reserved) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_get_subvol_info_args {
    pub treeid: __u64,
    pub name: [::std::os::raw::c_char; 256usize],
    pub parent_id: __u64,
    pub dirid: __u64,
    pub generation: __u64,
    pub flags: __u64,
    pub uuid: [__u8; 16usize],
    pub parent_uuid: [__u8; 16usize],
    pub received_uuid: [__u8; 16usize],
    pub ctransid: __u64,
    pub otransid: __u64,
    pub stransid: __u64,
    pub rtransid: __u64,
    pub ctime: btrfs_ioctl_timespec,
    pub otime: btrfs_ioctl_timespec,
    pub stime: btrfs_ioctl_timespec,
    pub rtime: btrfs_ioctl_timespec,
    pub reserved: [__u64; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_get_subvol_info_args"]
        [::std::mem::size_of::<btrfs_ioctl_get_subvol_info_args>() - 504usize];
    ["Alignment of btrfs_ioctl_get_subvol_info_args"]
        [::std::mem::align_of::<btrfs_ioctl_get_subvol_info_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::treeid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, treeid) - 0usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::name"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, name) - 8usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::parent_id"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, parent_id) - 264usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::dirid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, dirid) - 272usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::generation"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, generation) - 280usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, flags) - 288usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::uuid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, uuid) - 296usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::parent_uuid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, parent_uuid) - 312usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::received_uuid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, received_uuid) - 328usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::ctransid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, ctransid) - 344usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::otransid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, otransid) - 352usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::stransid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, stransid) - 360usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::rtransid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, rtransid) - 368usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::ctime"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, ctime) - 376usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::otime"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, otime) - 392usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::stime"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, stime) - 408usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::rtime"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, rtime) - 424usize];
    ["Offset of field: btrfs_ioctl_get_subvol_info_args::reserved"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_info_args, reserved) - 440usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_get_subvol_rootref_args {
    pub min_treeid: __u64,
    pub rootref: [btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1; 255usize],
    pub num_items: __u8,
    pub align: [__u8; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1 {
    pub treeid: __u64,
    pub dirid: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1>() - 16usize];
    ["Alignment of btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1>() - 8usize];
    ["Offset of field: btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1::treeid"][::std::mem::offset_of!(
        btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1,
        treeid
    ) - 0usize];
    ["Offset of field: btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1::dirid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1, dirid) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_get_subvol_rootref_args"]
        [::std::mem::size_of::<btrfs_ioctl_get_subvol_rootref_args>() - 4096usize];
    ["Alignment of btrfs_ioctl_get_subvol_rootref_args"]
        [::std::mem::align_of::<btrfs_ioctl_get_subvol_rootref_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_get_subvol_rootref_args::min_treeid"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_rootref_args, min_treeid) - 0usize];
    ["Offset of field: btrfs_ioctl_get_subvol_rootref_args::rootref"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_rootref_args, rootref) - 8usize];
    ["Offset of field: btrfs_ioctl_get_subvol_rootref_args::num_items"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_rootref_args, num_items) - 4088usize];
    ["Offset of field: btrfs_ioctl_get_subvol_rootref_args::align"]
        [::std::mem::offset_of!(btrfs_ioctl_get_subvol_rootref_args, align) - 4089usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_encoded_io_args {
    pub iov: *mut iovec,
    pub iovcnt: ::std::os::raw::c_ulong,
    pub offset: __s64,
    pub flags: __u64,
    pub len: __u64,
    pub unencoded_len: __u64,
    pub unencoded_offset: __u64,
    pub compression: __u32,
    pub encryption: __u32,
    pub reserved: [__u8; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_ioctl_encoded_io_args"]
        [::std::mem::size_of::<btrfs_ioctl_encoded_io_args>() - 128usize];
    ["Alignment of btrfs_ioctl_encoded_io_args"]
        [::std::mem::align_of::<btrfs_ioctl_encoded_io_args>() - 8usize];
    ["Offset of field: btrfs_ioctl_encoded_io_args::iov"]
        [::std::mem::offset_of!(btrfs_ioctl_encoded_io_args, iov) - 0usize];
    ["Offset of field: btrfs_ioctl_encoded_io_args::iovcnt"]
        [::std::mem::offset_of!(btrfs_ioctl_encoded_io_args, iovcnt) - 8usize];
    ["Offset of field: btrfs_ioctl_encoded_io_args::offset"]
        [::std::mem::offset_of!(btrfs_ioctl_encoded_io_args, offset) - 16usize];
    ["Offset of field: btrfs_ioctl_encoded_io_args::flags"]
        [::std::mem::offset_of!(btrfs_ioctl_encoded_io_args, flags) - 24usize];
    ["Offset of field: btrfs_ioctl_encoded_io_args::len"]
        [::std::mem::offset_of!(btrfs_ioctl_encoded_io_args, len) - 32usize];
    ["Offset of field: btrfs_ioctl_encoded_io_args::unencoded_len"]
        [::std::mem::offset_of!(btrfs_ioctl_encoded_io_args, unencoded_len) - 40usize];
    ["Offset of field: btrfs_ioctl_encoded_io_args::unencoded_offset"]
        [::std::mem::offset_of!(btrfs_ioctl_encoded_io_args, unencoded_offset) - 48usize];
    ["Offset of field: btrfs_ioctl_encoded_io_args::compression"]
        [::std::mem::offset_of!(btrfs_ioctl_encoded_io_args, compression) - 56usize];
    ["Offset of field: btrfs_ioctl_encoded_io_args::encryption"]
        [::std::mem::offset_of!(btrfs_ioctl_encoded_io_args, encryption) - 60usize];
    ["Offset of field: btrfs_ioctl_encoded_io_args::reserved"]
        [::std::mem::offset_of!(btrfs_ioctl_encoded_io_args, reserved) - 64usize];
};
pub const btrfs_err_code_notused: btrfs_err_code = 0;
pub const btrfs_err_code_BTRFS_ERROR_DEV_RAID1_MIN_NOT_MET: btrfs_err_code = 1;
pub const btrfs_err_code_BTRFS_ERROR_DEV_RAID10_MIN_NOT_MET: btrfs_err_code = 2;
pub const btrfs_err_code_BTRFS_ERROR_DEV_RAID5_MIN_NOT_MET: btrfs_err_code = 3;
pub const btrfs_err_code_BTRFS_ERROR_DEV_RAID6_MIN_NOT_MET: btrfs_err_code = 4;
pub const btrfs_err_code_BTRFS_ERROR_DEV_TGT_REPLACE: btrfs_err_code = 5;
pub const btrfs_err_code_BTRFS_ERROR_DEV_MISSING_NOT_FOUND: btrfs_err_code = 6;
pub const btrfs_err_code_BTRFS_ERROR_DEV_ONLY_WRITABLE: btrfs_err_code = 7;
pub const btrfs_err_code_BTRFS_ERROR_DEV_EXCL_RUN_IN_PROGRESS: btrfs_err_code = 8;
pub const btrfs_err_code_BTRFS_ERROR_DEV_RAID1C3_MIN_NOT_MET: btrfs_err_code = 9;
pub const btrfs_err_code_BTRFS_ERROR_DEV_RAID1C4_MIN_NOT_MET: btrfs_err_code = 10;
pub type btrfs_err_code = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_head_ {
    pub next: *mut list_head_,
    pub prev: *mut list_head_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_head_"][::std::mem::size_of::<list_head_>() - 16usize];
    ["Alignment of list_head_"][::std::mem::align_of::<list_head_>() - 8usize];
    ["Offset of field: list_head_::next"][::std::mem::offset_of!(list_head_, next) - 0usize];
    ["Offset of field: list_head_::prev"][::std::mem::offset_of!(list_head_, prev) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_trans_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_free_space_ctl {
    _unused: [u8; 0],
}
pub const btrfs_csum_type_BTRFS_CSUM_TYPE_CRC32: btrfs_csum_type = 0;
pub const btrfs_csum_type_BTRFS_CSUM_TYPE_XXHASH: btrfs_csum_type = 1;
pub const btrfs_csum_type_BTRFS_CSUM_TYPE_SHA256: btrfs_csum_type = 2;
pub const btrfs_csum_type_BTRFS_CSUM_TYPE_BLAKE2: btrfs_csum_type = 3;
pub type btrfs_csum_type = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_disk_key {
    pub objectid: __le64,
    pub type_: u8_,
    pub offset: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_disk_key"][::std::mem::size_of::<btrfs_disk_key>() - 17usize];
    ["Alignment of btrfs_disk_key"][::std::mem::align_of::<btrfs_disk_key>() - 1usize];
    ["Offset of field: btrfs_disk_key::objectid"]
        [::std::mem::offset_of!(btrfs_disk_key, objectid) - 0usize];
    ["Offset of field: btrfs_disk_key::type_"]
        [::std::mem::offset_of!(btrfs_disk_key, type_) - 8usize];
    ["Offset of field: btrfs_disk_key::offset"]
        [::std::mem::offset_of!(btrfs_disk_key, offset) - 9usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_key {
    pub objectid: u64_,
    pub type_: u8_,
    pub offset: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_key"][::std::mem::size_of::<btrfs_key>() - 17usize];
    ["Alignment of btrfs_key"][::std::mem::align_of::<btrfs_key>() - 1usize];
    ["Offset of field: btrfs_key::objectid"][::std::mem::offset_of!(btrfs_key, objectid) - 0usize];
    ["Offset of field: btrfs_key::type_"][::std::mem::offset_of!(btrfs_key, type_) - 8usize];
    ["Offset of field: btrfs_key::offset"][::std::mem::offset_of!(btrfs_key, offset) - 9usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cache_tree {
    pub root: rb_root,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cache_tree"][::std::mem::size_of::<cache_tree>() - 8usize];
    ["Alignment of cache_tree"][::std::mem::align_of::<cache_tree>() - 8usize];
    ["Offset of field: cache_tree::root"][::std::mem::offset_of!(cache_tree, root) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cache_extent {
    pub rb_node: rb_node,
    pub objectid: u64_,
    pub start: u64_,
    pub size: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cache_extent"][::std::mem::size_of::<cache_extent>() - 48usize];
    ["Alignment of cache_extent"][::std::mem::align_of::<cache_extent>() - 8usize];
    ["Offset of field: cache_extent::rb_node"]
        [::std::mem::offset_of!(cache_extent, rb_node) - 0usize];
    ["Offset of field: cache_extent::objectid"]
        [::std::mem::offset_of!(cache_extent, objectid) - 24usize];
    ["Offset of field: cache_extent::start"][::std::mem::offset_of!(cache_extent, start) - 32usize];
    ["Offset of field: cache_extent::size"][::std::mem::offset_of!(cache_extent, size) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extent_io_tree {
    pub state: cache_tree,
    pub cache: cache_tree,
    pub lru: list_head_,
    pub cache_size: u64_,
    pub max_cache_size: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of extent_io_tree"][::std::mem::size_of::<extent_io_tree>() - 48usize];
    ["Alignment of extent_io_tree"][::std::mem::align_of::<extent_io_tree>() - 8usize];
    ["Offset of field: extent_io_tree::state"]
        [::std::mem::offset_of!(extent_io_tree, state) - 0usize];
    ["Offset of field: extent_io_tree::cache"]
        [::std::mem::offset_of!(extent_io_tree, cache) - 8usize];
    ["Offset of field: extent_io_tree::lru"][::std::mem::offset_of!(extent_io_tree, lru) - 16usize];
    ["Offset of field: extent_io_tree::cache_size"]
        [::std::mem::offset_of!(extent_io_tree, cache_size) - 32usize];
    ["Offset of field: extent_io_tree::max_cache_size"]
        [::std::mem::offset_of!(extent_io_tree, max_cache_size) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extent_state {
    pub cache_node: cache_extent,
    pub start: u64_,
    pub end: u64_,
    pub refs: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_ulong,
    pub xprivate: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of extent_state"][::std::mem::size_of::<extent_state>() - 88usize];
    ["Alignment of extent_state"][::std::mem::align_of::<extent_state>() - 8usize];
    ["Offset of field: extent_state::cache_node"]
        [::std::mem::offset_of!(extent_state, cache_node) - 0usize];
    ["Offset of field: extent_state::start"][::std::mem::offset_of!(extent_state, start) - 48usize];
    ["Offset of field: extent_state::end"][::std::mem::offset_of!(extent_state, end) - 56usize];
    ["Offset of field: extent_state::refs"][::std::mem::offset_of!(extent_state, refs) - 64usize];
    ["Offset of field: extent_state::state"][::std::mem::offset_of!(extent_state, state) - 72usize];
    ["Offset of field: extent_state::xprivate"]
        [::std::mem::offset_of!(extent_state, xprivate) - 80usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct extent_buffer {
    pub cache_node: cache_extent,
    pub start: u64_,
    pub lru: list_head_,
    pub recow: list_head_,
    pub len: u32_,
    pub refs: ::std::os::raw::c_int,
    pub flags: u32_,
    pub fs_info: *mut btrfs_fs_info,
    pub data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of extent_buffer"][::std::mem::size_of::<extent_buffer>() - 112usize];
    ["Alignment of extent_buffer"][::std::mem::align_of::<extent_buffer>() - 8usize];
    ["Offset of field: extent_buffer::cache_node"]
        [::std::mem::offset_of!(extent_buffer, cache_node) - 0usize];
    ["Offset of field: extent_buffer::start"]
        [::std::mem::offset_of!(extent_buffer, start) - 48usize];
    ["Offset of field: extent_buffer::lru"][::std::mem::offset_of!(extent_buffer, lru) - 56usize];
    ["Offset of field: extent_buffer::recow"]
        [::std::mem::offset_of!(extent_buffer, recow) - 72usize];
    ["Offset of field: extent_buffer::len"][::std::mem::offset_of!(extent_buffer, len) - 88usize];
    ["Offset of field: extent_buffer::refs"][::std::mem::offset_of!(extent_buffer, refs) - 92usize];
    ["Offset of field: extent_buffer::flags"]
        [::std::mem::offset_of!(extent_buffer, flags) - 96usize];
    ["Offset of field: extent_buffer::fs_info"]
        [::std::mem::offset_of!(extent_buffer, fs_info) - 104usize];
    ["Offset of field: extent_buffer::data"]
        [::std::mem::offset_of!(extent_buffer, data) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_mapping_tree {
    pub cache_tree: cache_tree,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_mapping_tree"][::std::mem::size_of::<btrfs_mapping_tree>() - 8usize];
    ["Alignment of btrfs_mapping_tree"][::std::mem::align_of::<btrfs_mapping_tree>() - 8usize];
    ["Offset of field: btrfs_mapping_tree::cache_tree"]
        [::std::mem::offset_of!(btrfs_mapping_tree, cache_tree) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_dev_item {
    pub devid: __le64,
    pub total_bytes: __le64,
    pub bytes_used: __le64,
    pub io_align: __le32,
    pub io_width: __le32,
    pub sector_size: __le32,
    pub type_: __le64,
    pub generation: __le64,
    pub start_offset: __le64,
    pub dev_group: __le32,
    pub seek_speed: u8_,
    pub bandwidth: u8_,
    pub uuid: [u8_; 16usize],
    pub fsid: [u8_; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_dev_item"][::std::mem::size_of::<btrfs_dev_item>() - 98usize];
    ["Alignment of btrfs_dev_item"][::std::mem::align_of::<btrfs_dev_item>() - 1usize];
    ["Offset of field: btrfs_dev_item::devid"]
        [::std::mem::offset_of!(btrfs_dev_item, devid) - 0usize];
    ["Offset of field: btrfs_dev_item::total_bytes"]
        [::std::mem::offset_of!(btrfs_dev_item, total_bytes) - 8usize];
    ["Offset of field: btrfs_dev_item::bytes_used"]
        [::std::mem::offset_of!(btrfs_dev_item, bytes_used) - 16usize];
    ["Offset of field: btrfs_dev_item::io_align"]
        [::std::mem::offset_of!(btrfs_dev_item, io_align) - 24usize];
    ["Offset of field: btrfs_dev_item::io_width"]
        [::std::mem::offset_of!(btrfs_dev_item, io_width) - 28usize];
    ["Offset of field: btrfs_dev_item::sector_size"]
        [::std::mem::offset_of!(btrfs_dev_item, sector_size) - 32usize];
    ["Offset of field: btrfs_dev_item::type_"]
        [::std::mem::offset_of!(btrfs_dev_item, type_) - 36usize];
    ["Offset of field: btrfs_dev_item::generation"]
        [::std::mem::offset_of!(btrfs_dev_item, generation) - 44usize];
    ["Offset of field: btrfs_dev_item::start_offset"]
        [::std::mem::offset_of!(btrfs_dev_item, start_offset) - 52usize];
    ["Offset of field: btrfs_dev_item::dev_group"]
        [::std::mem::offset_of!(btrfs_dev_item, dev_group) - 60usize];
    ["Offset of field: btrfs_dev_item::seek_speed"]
        [::std::mem::offset_of!(btrfs_dev_item, seek_speed) - 64usize];
    ["Offset of field: btrfs_dev_item::bandwidth"]
        [::std::mem::offset_of!(btrfs_dev_item, bandwidth) - 65usize];
    ["Offset of field: btrfs_dev_item::uuid"]
        [::std::mem::offset_of!(btrfs_dev_item, uuid) - 66usize];
    ["Offset of field: btrfs_dev_item::fsid"]
        [::std::mem::offset_of!(btrfs_dev_item, fsid) - 82usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_stripe {
    pub devid: __le64,
    pub offset: __le64,
    pub dev_uuid: [u8_; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_stripe"][::std::mem::size_of::<btrfs_stripe>() - 32usize];
    ["Alignment of btrfs_stripe"][::std::mem::align_of::<btrfs_stripe>() - 1usize];
    ["Offset of field: btrfs_stripe::devid"][::std::mem::offset_of!(btrfs_stripe, devid) - 0usize];
    ["Offset of field: btrfs_stripe::offset"]
        [::std::mem::offset_of!(btrfs_stripe, offset) - 8usize];
    ["Offset of field: btrfs_stripe::dev_uuid"]
        [::std::mem::offset_of!(btrfs_stripe, dev_uuid) - 16usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_chunk {
    pub length: __le64,
    pub owner: __le64,
    pub stripe_len: __le64,
    pub type_: __le64,
    pub io_align: __le32,
    pub io_width: __le32,
    pub sector_size: __le32,
    pub num_stripes: __le16,
    pub sub_stripes: __le16,
    pub stripe: btrfs_stripe,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_chunk"][::std::mem::size_of::<btrfs_chunk>() - 80usize];
    ["Alignment of btrfs_chunk"][::std::mem::align_of::<btrfs_chunk>() - 1usize];
    ["Offset of field: btrfs_chunk::length"][::std::mem::offset_of!(btrfs_chunk, length) - 0usize];
    ["Offset of field: btrfs_chunk::owner"][::std::mem::offset_of!(btrfs_chunk, owner) - 8usize];
    ["Offset of field: btrfs_chunk::stripe_len"]
        [::std::mem::offset_of!(btrfs_chunk, stripe_len) - 16usize];
    ["Offset of field: btrfs_chunk::type_"][::std::mem::offset_of!(btrfs_chunk, type_) - 24usize];
    ["Offset of field: btrfs_chunk::io_align"]
        [::std::mem::offset_of!(btrfs_chunk, io_align) - 32usize];
    ["Offset of field: btrfs_chunk::io_width"]
        [::std::mem::offset_of!(btrfs_chunk, io_width) - 36usize];
    ["Offset of field: btrfs_chunk::sector_size"]
        [::std::mem::offset_of!(btrfs_chunk, sector_size) - 40usize];
    ["Offset of field: btrfs_chunk::num_stripes"]
        [::std::mem::offset_of!(btrfs_chunk, num_stripes) - 44usize];
    ["Offset of field: btrfs_chunk::sub_stripes"]
        [::std::mem::offset_of!(btrfs_chunk, sub_stripes) - 46usize];
    ["Offset of field: btrfs_chunk::stripe"][::std::mem::offset_of!(btrfs_chunk, stripe) - 48usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_free_space_entry {
    pub offset: __le64,
    pub bytes: __le64,
    pub type_: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_free_space_entry"][::std::mem::size_of::<btrfs_free_space_entry>() - 17usize];
    ["Alignment of btrfs_free_space_entry"]
        [::std::mem::align_of::<btrfs_free_space_entry>() - 1usize];
    ["Offset of field: btrfs_free_space_entry::offset"]
        [::std::mem::offset_of!(btrfs_free_space_entry, offset) - 0usize];
    ["Offset of field: btrfs_free_space_entry::bytes"]
        [::std::mem::offset_of!(btrfs_free_space_entry, bytes) - 8usize];
    ["Offset of field: btrfs_free_space_entry::type_"]
        [::std::mem::offset_of!(btrfs_free_space_entry, type_) - 16usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_free_space_header {
    pub location: btrfs_disk_key,
    pub generation: __le64,
    pub num_entries: __le64,
    pub num_bitmaps: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_free_space_header"][::std::mem::size_of::<btrfs_free_space_header>() - 41usize];
    ["Alignment of btrfs_free_space_header"]
        [::std::mem::align_of::<btrfs_free_space_header>() - 1usize];
    ["Offset of field: btrfs_free_space_header::location"]
        [::std::mem::offset_of!(btrfs_free_space_header, location) - 0usize];
    ["Offset of field: btrfs_free_space_header::generation"]
        [::std::mem::offset_of!(btrfs_free_space_header, generation) - 17usize];
    ["Offset of field: btrfs_free_space_header::num_entries"]
        [::std::mem::offset_of!(btrfs_free_space_header, num_entries) - 25usize];
    ["Offset of field: btrfs_free_space_header::num_bitmaps"]
        [::std::mem::offset_of!(btrfs_free_space_header, num_bitmaps) - 33usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_header {
    pub csum: [u8_; 32usize],
    pub fsid: [u8_; 16usize],
    pub bytenr: __le64,
    pub flags: __le64,
    pub chunk_tree_uuid: [u8_; 16usize],
    pub generation: __le64,
    pub owner: __le64,
    pub nritems: __le32,
    pub level: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_header"][::std::mem::size_of::<btrfs_header>() - 101usize];
    ["Alignment of btrfs_header"][::std::mem::align_of::<btrfs_header>() - 1usize];
    ["Offset of field: btrfs_header::csum"][::std::mem::offset_of!(btrfs_header, csum) - 0usize];
    ["Offset of field: btrfs_header::fsid"][::std::mem::offset_of!(btrfs_header, fsid) - 32usize];
    ["Offset of field: btrfs_header::bytenr"]
        [::std::mem::offset_of!(btrfs_header, bytenr) - 48usize];
    ["Offset of field: btrfs_header::flags"][::std::mem::offset_of!(btrfs_header, flags) - 56usize];
    ["Offset of field: btrfs_header::chunk_tree_uuid"]
        [::std::mem::offset_of!(btrfs_header, chunk_tree_uuid) - 64usize];
    ["Offset of field: btrfs_header::generation"]
        [::std::mem::offset_of!(btrfs_header, generation) - 80usize];
    ["Offset of field: btrfs_header::owner"][::std::mem::offset_of!(btrfs_header, owner) - 88usize];
    ["Offset of field: btrfs_header::nritems"]
        [::std::mem::offset_of!(btrfs_header, nritems) - 96usize];
    ["Offset of field: btrfs_header::level"]
        [::std::mem::offset_of!(btrfs_header, level) - 100usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_root_backup {
    pub tree_root: __le64,
    pub tree_root_gen: __le64,
    pub chunk_root: __le64,
    pub chunk_root_gen: __le64,
    pub extent_root: __le64,
    pub extent_root_gen: __le64,
    pub fs_root: __le64,
    pub fs_root_gen: __le64,
    pub dev_root: __le64,
    pub dev_root_gen: __le64,
    pub csum_root: __le64,
    pub csum_root_gen: __le64,
    pub total_bytes: __le64,
    pub bytes_used: __le64,
    pub num_devices: __le64,
    pub unsed_64: [__le64; 4usize],
    pub tree_root_level: u8_,
    pub chunk_root_level: u8_,
    pub extent_root_level: u8_,
    pub fs_root_level: u8_,
    pub dev_root_level: u8_,
    pub csum_root_level: u8_,
    pub unused_8: [u8_; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_root_backup"][::std::mem::size_of::<btrfs_root_backup>() - 168usize];
    ["Alignment of btrfs_root_backup"][::std::mem::align_of::<btrfs_root_backup>() - 1usize];
    ["Offset of field: btrfs_root_backup::tree_root"]
        [::std::mem::offset_of!(btrfs_root_backup, tree_root) - 0usize];
    ["Offset of field: btrfs_root_backup::tree_root_gen"]
        [::std::mem::offset_of!(btrfs_root_backup, tree_root_gen) - 8usize];
    ["Offset of field: btrfs_root_backup::chunk_root"]
        [::std::mem::offset_of!(btrfs_root_backup, chunk_root) - 16usize];
    ["Offset of field: btrfs_root_backup::chunk_root_gen"]
        [::std::mem::offset_of!(btrfs_root_backup, chunk_root_gen) - 24usize];
    ["Offset of field: btrfs_root_backup::extent_root"]
        [::std::mem::offset_of!(btrfs_root_backup, extent_root) - 32usize];
    ["Offset of field: btrfs_root_backup::extent_root_gen"]
        [::std::mem::offset_of!(btrfs_root_backup, extent_root_gen) - 40usize];
    ["Offset of field: btrfs_root_backup::fs_root"]
        [::std::mem::offset_of!(btrfs_root_backup, fs_root) - 48usize];
    ["Offset of field: btrfs_root_backup::fs_root_gen"]
        [::std::mem::offset_of!(btrfs_root_backup, fs_root_gen) - 56usize];
    ["Offset of field: btrfs_root_backup::dev_root"]
        [::std::mem::offset_of!(btrfs_root_backup, dev_root) - 64usize];
    ["Offset of field: btrfs_root_backup::dev_root_gen"]
        [::std::mem::offset_of!(btrfs_root_backup, dev_root_gen) - 72usize];
    ["Offset of field: btrfs_root_backup::csum_root"]
        [::std::mem::offset_of!(btrfs_root_backup, csum_root) - 80usize];
    ["Offset of field: btrfs_root_backup::csum_root_gen"]
        [::std::mem::offset_of!(btrfs_root_backup, csum_root_gen) - 88usize];
    ["Offset of field: btrfs_root_backup::total_bytes"]
        [::std::mem::offset_of!(btrfs_root_backup, total_bytes) - 96usize];
    ["Offset of field: btrfs_root_backup::bytes_used"]
        [::std::mem::offset_of!(btrfs_root_backup, bytes_used) - 104usize];
    ["Offset of field: btrfs_root_backup::num_devices"]
        [::std::mem::offset_of!(btrfs_root_backup, num_devices) - 112usize];
    ["Offset of field: btrfs_root_backup::unsed_64"]
        [::std::mem::offset_of!(btrfs_root_backup, unsed_64) - 120usize];
    ["Offset of field: btrfs_root_backup::tree_root_level"]
        [::std::mem::offset_of!(btrfs_root_backup, tree_root_level) - 152usize];
    ["Offset of field: btrfs_root_backup::chunk_root_level"]
        [::std::mem::offset_of!(btrfs_root_backup, chunk_root_level) - 153usize];
    ["Offset of field: btrfs_root_backup::extent_root_level"]
        [::std::mem::offset_of!(btrfs_root_backup, extent_root_level) - 154usize];
    ["Offset of field: btrfs_root_backup::fs_root_level"]
        [::std::mem::offset_of!(btrfs_root_backup, fs_root_level) - 155usize];
    ["Offset of field: btrfs_root_backup::dev_root_level"]
        [::std::mem::offset_of!(btrfs_root_backup, dev_root_level) - 156usize];
    ["Offset of field: btrfs_root_backup::csum_root_level"]
        [::std::mem::offset_of!(btrfs_root_backup, csum_root_level) - 157usize];
    ["Offset of field: btrfs_root_backup::unused_8"]
        [::std::mem::offset_of!(btrfs_root_backup, unused_8) - 158usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_super_block {
    pub csum: [u8_; 32usize],
    pub fsid: [u8_; 16usize],
    pub bytenr: __le64,
    pub flags: __le64,
    pub magic: __le64,
    pub generation: __le64,
    pub root: __le64,
    pub chunk_root: __le64,
    pub log_root: __le64,
    pub log_root_transid: __le64,
    pub total_bytes: __le64,
    pub bytes_used: __le64,
    pub root_dir_objectid: __le64,
    pub num_devices: __le64,
    pub sectorsize: __le32,
    pub nodesize: __le32,
    pub __unused_leafsize: __le32,
    pub stripesize: __le32,
    pub sys_chunk_array_size: __le32,
    pub chunk_root_generation: __le64,
    pub compat_flags: __le64,
    pub compat_ro_flags: __le64,
    pub incompat_flags: __le64,
    pub csum_type: __le16,
    pub root_level: u8_,
    pub chunk_root_level: u8_,
    pub log_root_level: u8_,
    pub dev_item: btrfs_dev_item,
    pub label: [::std::os::raw::c_char; 256usize],
    pub cache_generation: __le64,
    pub uuid_tree_generation: __le64,
    pub metadata_uuid: [u8_; 16usize],
    pub nr_global_roots: __le64,
    pub block_group_root: __le64,
    pub block_group_root_generation: __le64,
    pub block_group_root_level: u8_,
    pub reserved8: [u8_; 7usize],
    pub reserved: [__le64; 24usize],
    pub sys_chunk_array: [u8_; 2048usize],
    pub super_roots: [btrfs_root_backup; 4usize],
    pub padding: [u8_; 565usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_super_block"][::std::mem::size_of::<btrfs_super_block>() - 4096usize];
    ["Alignment of btrfs_super_block"][::std::mem::align_of::<btrfs_super_block>() - 1usize];
    ["Offset of field: btrfs_super_block::csum"]
        [::std::mem::offset_of!(btrfs_super_block, csum) - 0usize];
    ["Offset of field: btrfs_super_block::fsid"]
        [::std::mem::offset_of!(btrfs_super_block, fsid) - 32usize];
    ["Offset of field: btrfs_super_block::bytenr"]
        [::std::mem::offset_of!(btrfs_super_block, bytenr) - 48usize];
    ["Offset of field: btrfs_super_block::flags"]
        [::std::mem::offset_of!(btrfs_super_block, flags) - 56usize];
    ["Offset of field: btrfs_super_block::magic"]
        [::std::mem::offset_of!(btrfs_super_block, magic) - 64usize];
    ["Offset of field: btrfs_super_block::generation"]
        [::std::mem::offset_of!(btrfs_super_block, generation) - 72usize];
    ["Offset of field: btrfs_super_block::root"]
        [::std::mem::offset_of!(btrfs_super_block, root) - 80usize];
    ["Offset of field: btrfs_super_block::chunk_root"]
        [::std::mem::offset_of!(btrfs_super_block, chunk_root) - 88usize];
    ["Offset of field: btrfs_super_block::log_root"]
        [::std::mem::offset_of!(btrfs_super_block, log_root) - 96usize];
    ["Offset of field: btrfs_super_block::log_root_transid"]
        [::std::mem::offset_of!(btrfs_super_block, log_root_transid) - 104usize];
    ["Offset of field: btrfs_super_block::total_bytes"]
        [::std::mem::offset_of!(btrfs_super_block, total_bytes) - 112usize];
    ["Offset of field: btrfs_super_block::bytes_used"]
        [::std::mem::offset_of!(btrfs_super_block, bytes_used) - 120usize];
    ["Offset of field: btrfs_super_block::root_dir_objectid"]
        [::std::mem::offset_of!(btrfs_super_block, root_dir_objectid) - 128usize];
    ["Offset of field: btrfs_super_block::num_devices"]
        [::std::mem::offset_of!(btrfs_super_block, num_devices) - 136usize];
    ["Offset of field: btrfs_super_block::sectorsize"]
        [::std::mem::offset_of!(btrfs_super_block, sectorsize) - 144usize];
    ["Offset of field: btrfs_super_block::nodesize"]
        [::std::mem::offset_of!(btrfs_super_block, nodesize) - 148usize];
    ["Offset of field: btrfs_super_block::__unused_leafsize"]
        [::std::mem::offset_of!(btrfs_super_block, __unused_leafsize) - 152usize];
    ["Offset of field: btrfs_super_block::stripesize"]
        [::std::mem::offset_of!(btrfs_super_block, stripesize) - 156usize];
    ["Offset of field: btrfs_super_block::sys_chunk_array_size"]
        [::std::mem::offset_of!(btrfs_super_block, sys_chunk_array_size) - 160usize];
    ["Offset of field: btrfs_super_block::chunk_root_generation"]
        [::std::mem::offset_of!(btrfs_super_block, chunk_root_generation) - 164usize];
    ["Offset of field: btrfs_super_block::compat_flags"]
        [::std::mem::offset_of!(btrfs_super_block, compat_flags) - 172usize];
    ["Offset of field: btrfs_super_block::compat_ro_flags"]
        [::std::mem::offset_of!(btrfs_super_block, compat_ro_flags) - 180usize];
    ["Offset of field: btrfs_super_block::incompat_flags"]
        [::std::mem::offset_of!(btrfs_super_block, incompat_flags) - 188usize];
    ["Offset of field: btrfs_super_block::csum_type"]
        [::std::mem::offset_of!(btrfs_super_block, csum_type) - 196usize];
    ["Offset of field: btrfs_super_block::root_level"]
        [::std::mem::offset_of!(btrfs_super_block, root_level) - 198usize];
    ["Offset of field: btrfs_super_block::chunk_root_level"]
        [::std::mem::offset_of!(btrfs_super_block, chunk_root_level) - 199usize];
    ["Offset of field: btrfs_super_block::log_root_level"]
        [::std::mem::offset_of!(btrfs_super_block, log_root_level) - 200usize];
    ["Offset of field: btrfs_super_block::dev_item"]
        [::std::mem::offset_of!(btrfs_super_block, dev_item) - 201usize];
    ["Offset of field: btrfs_super_block::label"]
        [::std::mem::offset_of!(btrfs_super_block, label) - 299usize];
    ["Offset of field: btrfs_super_block::cache_generation"]
        [::std::mem::offset_of!(btrfs_super_block, cache_generation) - 555usize];
    ["Offset of field: btrfs_super_block::uuid_tree_generation"]
        [::std::mem::offset_of!(btrfs_super_block, uuid_tree_generation) - 563usize];
    ["Offset of field: btrfs_super_block::metadata_uuid"]
        [::std::mem::offset_of!(btrfs_super_block, metadata_uuid) - 571usize];
    ["Offset of field: btrfs_super_block::nr_global_roots"]
        [::std::mem::offset_of!(btrfs_super_block, nr_global_roots) - 587usize];
    ["Offset of field: btrfs_super_block::block_group_root"]
        [::std::mem::offset_of!(btrfs_super_block, block_group_root) - 595usize];
    ["Offset of field: btrfs_super_block::block_group_root_generation"]
        [::std::mem::offset_of!(btrfs_super_block, block_group_root_generation) - 603usize];
    ["Offset of field: btrfs_super_block::block_group_root_level"]
        [::std::mem::offset_of!(btrfs_super_block, block_group_root_level) - 611usize];
    ["Offset of field: btrfs_super_block::reserved8"]
        [::std::mem::offset_of!(btrfs_super_block, reserved8) - 612usize];
    ["Offset of field: btrfs_super_block::reserved"]
        [::std::mem::offset_of!(btrfs_super_block, reserved) - 619usize];
    ["Offset of field: btrfs_super_block::sys_chunk_array"]
        [::std::mem::offset_of!(btrfs_super_block, sys_chunk_array) - 811usize];
    ["Offset of field: btrfs_super_block::super_roots"]
        [::std::mem::offset_of!(btrfs_super_block, super_roots) - 2859usize];
    ["Offset of field: btrfs_super_block::padding"]
        [::std::mem::offset_of!(btrfs_super_block, padding) - 3531usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_item {
    pub key: btrfs_disk_key,
    pub offset: __le32,
    pub size: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_item"][::std::mem::size_of::<btrfs_item>() - 25usize];
    ["Alignment of btrfs_item"][::std::mem::align_of::<btrfs_item>() - 1usize];
    ["Offset of field: btrfs_item::key"][::std::mem::offset_of!(btrfs_item, key) - 0usize];
    ["Offset of field: btrfs_item::offset"][::std::mem::offset_of!(btrfs_item, offset) - 17usize];
    ["Offset of field: btrfs_item::size"][::std::mem::offset_of!(btrfs_item, size) - 21usize];
};
#[repr(C, packed)]
pub struct btrfs_leaf {
    pub header: btrfs_header,
    pub items: __IncompleteArrayField<btrfs_item>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_leaf"][::std::mem::size_of::<btrfs_leaf>() - 101usize];
    ["Alignment of btrfs_leaf"][::std::mem::align_of::<btrfs_leaf>() - 1usize];
    ["Offset of field: btrfs_leaf::header"][::std::mem::offset_of!(btrfs_leaf, header) - 0usize];
    ["Offset of field: btrfs_leaf::items"][::std::mem::offset_of!(btrfs_leaf, items) - 101usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_key_ptr {
    pub key: btrfs_disk_key,
    pub blockptr: __le64,
    pub generation: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_key_ptr"][::std::mem::size_of::<btrfs_key_ptr>() - 33usize];
    ["Alignment of btrfs_key_ptr"][::std::mem::align_of::<btrfs_key_ptr>() - 1usize];
    ["Offset of field: btrfs_key_ptr::key"][::std::mem::offset_of!(btrfs_key_ptr, key) - 0usize];
    ["Offset of field: btrfs_key_ptr::blockptr"]
        [::std::mem::offset_of!(btrfs_key_ptr, blockptr) - 17usize];
    ["Offset of field: btrfs_key_ptr::generation"]
        [::std::mem::offset_of!(btrfs_key_ptr, generation) - 25usize];
};
#[repr(C, packed)]
pub struct btrfs_node {
    pub header: btrfs_header,
    pub ptrs: __IncompleteArrayField<btrfs_key_ptr>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_node"][::std::mem::size_of::<btrfs_node>() - 101usize];
    ["Alignment of btrfs_node"][::std::mem::align_of::<btrfs_node>() - 1usize];
    ["Offset of field: btrfs_node::header"][::std::mem::offset_of!(btrfs_node, header) - 0usize];
    ["Offset of field: btrfs_node::ptrs"][::std::mem::offset_of!(btrfs_node, ptrs) - 101usize];
};
pub const READA_NONE: _bindgen_ty_1 = 0;
pub const READA_BACK: _bindgen_ty_1 = 1;
pub const READA_FORWARD: _bindgen_ty_1 = 2;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_path {
    pub nodes: [*mut extent_buffer; 8usize],
    pub slots: [::std::os::raw::c_int; 8usize],
    pub reada: ::std::os::raw::c_schar,
    pub lowest_level: u8_,
    pub search_for_split: u8_,
    pub skip_check_block: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_path"][::std::mem::size_of::<btrfs_path>() - 104usize];
    ["Alignment of btrfs_path"][::std::mem::align_of::<btrfs_path>() - 8usize];
    ["Offset of field: btrfs_path::nodes"][::std::mem::offset_of!(btrfs_path, nodes) - 0usize];
    ["Offset of field: btrfs_path::slots"][::std::mem::offset_of!(btrfs_path, slots) - 64usize];
    ["Offset of field: btrfs_path::reada"][::std::mem::offset_of!(btrfs_path, reada) - 96usize];
    ["Offset of field: btrfs_path::lowest_level"]
        [::std::mem::offset_of!(btrfs_path, lowest_level) - 97usize];
    ["Offset of field: btrfs_path::search_for_split"]
        [::std::mem::offset_of!(btrfs_path, search_for_split) - 98usize];
    ["Offset of field: btrfs_path::skip_check_block"]
        [::std::mem::offset_of!(btrfs_path, skip_check_block) - 99usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_extent_item {
    pub refs: __le64,
    pub generation: __le64,
    pub flags: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_extent_item"][::std::mem::size_of::<btrfs_extent_item>() - 24usize];
    ["Alignment of btrfs_extent_item"][::std::mem::align_of::<btrfs_extent_item>() - 1usize];
    ["Offset of field: btrfs_extent_item::refs"]
        [::std::mem::offset_of!(btrfs_extent_item, refs) - 0usize];
    ["Offset of field: btrfs_extent_item::generation"]
        [::std::mem::offset_of!(btrfs_extent_item, generation) - 8usize];
    ["Offset of field: btrfs_extent_item::flags"]
        [::std::mem::offset_of!(btrfs_extent_item, flags) - 16usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_extent_item_v0 {
    pub refs: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_extent_item_v0"][::std::mem::size_of::<btrfs_extent_item_v0>() - 4usize];
    ["Alignment of btrfs_extent_item_v0"][::std::mem::align_of::<btrfs_extent_item_v0>() - 1usize];
    ["Offset of field: btrfs_extent_item_v0::refs"]
        [::std::mem::offset_of!(btrfs_extent_item_v0, refs) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_tree_block_info {
    pub key: btrfs_disk_key,
    pub level: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_tree_block_info"][::std::mem::size_of::<btrfs_tree_block_info>() - 18usize];
    ["Alignment of btrfs_tree_block_info"]
        [::std::mem::align_of::<btrfs_tree_block_info>() - 1usize];
    ["Offset of field: btrfs_tree_block_info::key"]
        [::std::mem::offset_of!(btrfs_tree_block_info, key) - 0usize];
    ["Offset of field: btrfs_tree_block_info::level"]
        [::std::mem::offset_of!(btrfs_tree_block_info, level) - 17usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_extent_data_ref {
    pub root: __le64,
    pub objectid: __le64,
    pub offset: __le64,
    pub count: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_extent_data_ref"][::std::mem::size_of::<btrfs_extent_data_ref>() - 28usize];
    ["Alignment of btrfs_extent_data_ref"]
        [::std::mem::align_of::<btrfs_extent_data_ref>() - 1usize];
    ["Offset of field: btrfs_extent_data_ref::root"]
        [::std::mem::offset_of!(btrfs_extent_data_ref, root) - 0usize];
    ["Offset of field: btrfs_extent_data_ref::objectid"]
        [::std::mem::offset_of!(btrfs_extent_data_ref, objectid) - 8usize];
    ["Offset of field: btrfs_extent_data_ref::offset"]
        [::std::mem::offset_of!(btrfs_extent_data_ref, offset) - 16usize];
    ["Offset of field: btrfs_extent_data_ref::count"]
        [::std::mem::offset_of!(btrfs_extent_data_ref, count) - 24usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_shared_data_ref {
    pub count: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_shared_data_ref"][::std::mem::size_of::<btrfs_shared_data_ref>() - 4usize];
    ["Alignment of btrfs_shared_data_ref"]
        [::std::mem::align_of::<btrfs_shared_data_ref>() - 1usize];
    ["Offset of field: btrfs_shared_data_ref::count"]
        [::std::mem::offset_of!(btrfs_shared_data_ref, count) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_extent_inline_ref {
    pub type_: u8_,
    pub offset: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_extent_inline_ref"][::std::mem::size_of::<btrfs_extent_inline_ref>() - 9usize];
    ["Alignment of btrfs_extent_inline_ref"]
        [::std::mem::align_of::<btrfs_extent_inline_ref>() - 1usize];
    ["Offset of field: btrfs_extent_inline_ref::type_"]
        [::std::mem::offset_of!(btrfs_extent_inline_ref, type_) - 0usize];
    ["Offset of field: btrfs_extent_inline_ref::offset"]
        [::std::mem::offset_of!(btrfs_extent_inline_ref, offset) - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_extent_ref_v0 {
    pub root: __le64,
    pub generation: __le64,
    pub objectid: __le64,
    pub count: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_extent_ref_v0"][::std::mem::size_of::<btrfs_extent_ref_v0>() - 28usize];
    ["Alignment of btrfs_extent_ref_v0"][::std::mem::align_of::<btrfs_extent_ref_v0>() - 1usize];
    ["Offset of field: btrfs_extent_ref_v0::root"]
        [::std::mem::offset_of!(btrfs_extent_ref_v0, root) - 0usize];
    ["Offset of field: btrfs_extent_ref_v0::generation"]
        [::std::mem::offset_of!(btrfs_extent_ref_v0, generation) - 8usize];
    ["Offset of field: btrfs_extent_ref_v0::objectid"]
        [::std::mem::offset_of!(btrfs_extent_ref_v0, objectid) - 16usize];
    ["Offset of field: btrfs_extent_ref_v0::count"]
        [::std::mem::offset_of!(btrfs_extent_ref_v0, count) - 24usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_dev_extent {
    pub chunk_tree: __le64,
    pub chunk_objectid: __le64,
    pub chunk_offset: __le64,
    pub length: __le64,
    pub chunk_tree_uuid: [u8_; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_dev_extent"][::std::mem::size_of::<btrfs_dev_extent>() - 48usize];
    ["Alignment of btrfs_dev_extent"][::std::mem::align_of::<btrfs_dev_extent>() - 1usize];
    ["Offset of field: btrfs_dev_extent::chunk_tree"]
        [::std::mem::offset_of!(btrfs_dev_extent, chunk_tree) - 0usize];
    ["Offset of field: btrfs_dev_extent::chunk_objectid"]
        [::std::mem::offset_of!(btrfs_dev_extent, chunk_objectid) - 8usize];
    ["Offset of field: btrfs_dev_extent::chunk_offset"]
        [::std::mem::offset_of!(btrfs_dev_extent, chunk_offset) - 16usize];
    ["Offset of field: btrfs_dev_extent::length"]
        [::std::mem::offset_of!(btrfs_dev_extent, length) - 24usize];
    ["Offset of field: btrfs_dev_extent::chunk_tree_uuid"]
        [::std::mem::offset_of!(btrfs_dev_extent, chunk_tree_uuid) - 32usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_inode_ref {
    pub index: __le64,
    pub name_len: __le16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_inode_ref"][::std::mem::size_of::<btrfs_inode_ref>() - 10usize];
    ["Alignment of btrfs_inode_ref"][::std::mem::align_of::<btrfs_inode_ref>() - 1usize];
    ["Offset of field: btrfs_inode_ref::index"]
        [::std::mem::offset_of!(btrfs_inode_ref, index) - 0usize];
    ["Offset of field: btrfs_inode_ref::name_len"]
        [::std::mem::offset_of!(btrfs_inode_ref, name_len) - 8usize];
};
#[repr(C, packed)]
pub struct btrfs_inode_extref {
    pub parent_objectid: __le64,
    pub index: __le64,
    pub name_len: __le16,
    pub name: __IncompleteArrayField<__u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_inode_extref"][::std::mem::size_of::<btrfs_inode_extref>() - 18usize];
    ["Alignment of btrfs_inode_extref"][::std::mem::align_of::<btrfs_inode_extref>() - 1usize];
    ["Offset of field: btrfs_inode_extref::parent_objectid"]
        [::std::mem::offset_of!(btrfs_inode_extref, parent_objectid) - 0usize];
    ["Offset of field: btrfs_inode_extref::index"]
        [::std::mem::offset_of!(btrfs_inode_extref, index) - 8usize];
    ["Offset of field: btrfs_inode_extref::name_len"]
        [::std::mem::offset_of!(btrfs_inode_extref, name_len) - 16usize];
    ["Offset of field: btrfs_inode_extref::name"]
        [::std::mem::offset_of!(btrfs_inode_extref, name) - 18usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_timespec {
    pub sec: __le64,
    pub nsec: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_timespec"][::std::mem::size_of::<btrfs_timespec>() - 12usize];
    ["Alignment of btrfs_timespec"][::std::mem::align_of::<btrfs_timespec>() - 1usize];
    ["Offset of field: btrfs_timespec::sec"][::std::mem::offset_of!(btrfs_timespec, sec) - 0usize];
    ["Offset of field: btrfs_timespec::nsec"]
        [::std::mem::offset_of!(btrfs_timespec, nsec) - 8usize];
};
pub const btrfs_compression_type_BTRFS_COMPRESS_NONE: btrfs_compression_type = 0;
pub const btrfs_compression_type_BTRFS_COMPRESS_ZLIB: btrfs_compression_type = 1;
pub const btrfs_compression_type_BTRFS_COMPRESS_LZO: btrfs_compression_type = 2;
pub const btrfs_compression_type_BTRFS_COMPRESS_ZSTD: btrfs_compression_type = 3;
pub const btrfs_compression_type_BTRFS_COMPRESS_TYPES: btrfs_compression_type = 3;
pub const btrfs_compression_type_BTRFS_COMPRESS_LAST: btrfs_compression_type = 4;
pub type btrfs_compression_type = ::std::os::raw::c_uint;
pub const btrfs_encryption_type_BTRFS_ENCRYPTION_NONE: btrfs_encryption_type = 0;
pub const btrfs_encryption_type_BTRFS_ENCRYPTION_LAST: btrfs_encryption_type = 1;
pub type btrfs_encryption_type = ::std::os::raw::c_uint;
pub const btrfs_tree_block_status_BTRFS_TREE_BLOCK_CLEAN: btrfs_tree_block_status = 0;
pub const btrfs_tree_block_status_BTRFS_TREE_BLOCK_INVALID_NRITEMS: btrfs_tree_block_status = 1;
pub const btrfs_tree_block_status_BTRFS_TREE_BLOCK_INVALID_PARENT_KEY: btrfs_tree_block_status = 2;
pub const btrfs_tree_block_status_BTRFS_TREE_BLOCK_BAD_KEY_ORDER: btrfs_tree_block_status = 3;
pub const btrfs_tree_block_status_BTRFS_TREE_BLOCK_INVALID_LEVEL: btrfs_tree_block_status = 4;
pub const btrfs_tree_block_status_BTRFS_TREE_BLOCK_INVALID_FREE_SPACE: btrfs_tree_block_status = 5;
pub const btrfs_tree_block_status_BTRFS_TREE_BLOCK_INVALID_OFFSETS: btrfs_tree_block_status = 6;
pub const btrfs_tree_block_status_BTRFS_TREE_BLOCK_INVALID_BLOCKPTR: btrfs_tree_block_status = 7;
pub type btrfs_tree_block_status = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_inode_item {
    pub generation: __le64,
    pub transid: __le64,
    pub size: __le64,
    pub nbytes: __le64,
    pub block_group: __le64,
    pub nlink: __le32,
    pub uid: __le32,
    pub gid: __le32,
    pub mode: __le32,
    pub rdev: __le64,
    pub flags: __le64,
    pub sequence: __le64,
    pub reserved: [__le64; 4usize],
    pub atime: btrfs_timespec,
    pub ctime: btrfs_timespec,
    pub mtime: btrfs_timespec,
    pub otime: btrfs_timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_inode_item"][::std::mem::size_of::<btrfs_inode_item>() - 160usize];
    ["Alignment of btrfs_inode_item"][::std::mem::align_of::<btrfs_inode_item>() - 1usize];
    ["Offset of field: btrfs_inode_item::generation"]
        [::std::mem::offset_of!(btrfs_inode_item, generation) - 0usize];
    ["Offset of field: btrfs_inode_item::transid"]
        [::std::mem::offset_of!(btrfs_inode_item, transid) - 8usize];
    ["Offset of field: btrfs_inode_item::size"]
        [::std::mem::offset_of!(btrfs_inode_item, size) - 16usize];
    ["Offset of field: btrfs_inode_item::nbytes"]
        [::std::mem::offset_of!(btrfs_inode_item, nbytes) - 24usize];
    ["Offset of field: btrfs_inode_item::block_group"]
        [::std::mem::offset_of!(btrfs_inode_item, block_group) - 32usize];
    ["Offset of field: btrfs_inode_item::nlink"]
        [::std::mem::offset_of!(btrfs_inode_item, nlink) - 40usize];
    ["Offset of field: btrfs_inode_item::uid"]
        [::std::mem::offset_of!(btrfs_inode_item, uid) - 44usize];
    ["Offset of field: btrfs_inode_item::gid"]
        [::std::mem::offset_of!(btrfs_inode_item, gid) - 48usize];
    ["Offset of field: btrfs_inode_item::mode"]
        [::std::mem::offset_of!(btrfs_inode_item, mode) - 52usize];
    ["Offset of field: btrfs_inode_item::rdev"]
        [::std::mem::offset_of!(btrfs_inode_item, rdev) - 56usize];
    ["Offset of field: btrfs_inode_item::flags"]
        [::std::mem::offset_of!(btrfs_inode_item, flags) - 64usize];
    ["Offset of field: btrfs_inode_item::sequence"]
        [::std::mem::offset_of!(btrfs_inode_item, sequence) - 72usize];
    ["Offset of field: btrfs_inode_item::reserved"]
        [::std::mem::offset_of!(btrfs_inode_item, reserved) - 80usize];
    ["Offset of field: btrfs_inode_item::atime"]
        [::std::mem::offset_of!(btrfs_inode_item, atime) - 112usize];
    ["Offset of field: btrfs_inode_item::ctime"]
        [::std::mem::offset_of!(btrfs_inode_item, ctime) - 124usize];
    ["Offset of field: btrfs_inode_item::mtime"]
        [::std::mem::offset_of!(btrfs_inode_item, mtime) - 136usize];
    ["Offset of field: btrfs_inode_item::otime"]
        [::std::mem::offset_of!(btrfs_inode_item, otime) - 148usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_dir_log_item {
    pub end: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_dir_log_item"][::std::mem::size_of::<btrfs_dir_log_item>() - 8usize];
    ["Alignment of btrfs_dir_log_item"][::std::mem::align_of::<btrfs_dir_log_item>() - 1usize];
    ["Offset of field: btrfs_dir_log_item::end"]
        [::std::mem::offset_of!(btrfs_dir_log_item, end) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_dir_item {
    pub location: btrfs_disk_key,
    pub transid: __le64,
    pub data_len: __le16,
    pub name_len: __le16,
    pub type_: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_dir_item"][::std::mem::size_of::<btrfs_dir_item>() - 30usize];
    ["Alignment of btrfs_dir_item"][::std::mem::align_of::<btrfs_dir_item>() - 1usize];
    ["Offset of field: btrfs_dir_item::location"]
        [::std::mem::offset_of!(btrfs_dir_item, location) - 0usize];
    ["Offset of field: btrfs_dir_item::transid"]
        [::std::mem::offset_of!(btrfs_dir_item, transid) - 17usize];
    ["Offset of field: btrfs_dir_item::data_len"]
        [::std::mem::offset_of!(btrfs_dir_item, data_len) - 25usize];
    ["Offset of field: btrfs_dir_item::name_len"]
        [::std::mem::offset_of!(btrfs_dir_item, name_len) - 27usize];
    ["Offset of field: btrfs_dir_item::type_"]
        [::std::mem::offset_of!(btrfs_dir_item, type_) - 29usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_root_item_v0 {
    pub inode: btrfs_inode_item,
    pub generation: __le64,
    pub root_dirid: __le64,
    pub bytenr: __le64,
    pub byte_limit: __le64,
    pub bytes_used: __le64,
    pub last_snapshot: __le64,
    pub flags: __le64,
    pub refs: __le32,
    pub drop_progress: btrfs_disk_key,
    pub drop_level: u8_,
    pub level: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_root_item_v0"][::std::mem::size_of::<btrfs_root_item_v0>() - 239usize];
    ["Alignment of btrfs_root_item_v0"][::std::mem::align_of::<btrfs_root_item_v0>() - 1usize];
    ["Offset of field: btrfs_root_item_v0::inode"]
        [::std::mem::offset_of!(btrfs_root_item_v0, inode) - 0usize];
    ["Offset of field: btrfs_root_item_v0::generation"]
        [::std::mem::offset_of!(btrfs_root_item_v0, generation) - 160usize];
    ["Offset of field: btrfs_root_item_v0::root_dirid"]
        [::std::mem::offset_of!(btrfs_root_item_v0, root_dirid) - 168usize];
    ["Offset of field: btrfs_root_item_v0::bytenr"]
        [::std::mem::offset_of!(btrfs_root_item_v0, bytenr) - 176usize];
    ["Offset of field: btrfs_root_item_v0::byte_limit"]
        [::std::mem::offset_of!(btrfs_root_item_v0, byte_limit) - 184usize];
    ["Offset of field: btrfs_root_item_v0::bytes_used"]
        [::std::mem::offset_of!(btrfs_root_item_v0, bytes_used) - 192usize];
    ["Offset of field: btrfs_root_item_v0::last_snapshot"]
        [::std::mem::offset_of!(btrfs_root_item_v0, last_snapshot) - 200usize];
    ["Offset of field: btrfs_root_item_v0::flags"]
        [::std::mem::offset_of!(btrfs_root_item_v0, flags) - 208usize];
    ["Offset of field: btrfs_root_item_v0::refs"]
        [::std::mem::offset_of!(btrfs_root_item_v0, refs) - 216usize];
    ["Offset of field: btrfs_root_item_v0::drop_progress"]
        [::std::mem::offset_of!(btrfs_root_item_v0, drop_progress) - 220usize];
    ["Offset of field: btrfs_root_item_v0::drop_level"]
        [::std::mem::offset_of!(btrfs_root_item_v0, drop_level) - 237usize];
    ["Offset of field: btrfs_root_item_v0::level"]
        [::std::mem::offset_of!(btrfs_root_item_v0, level) - 238usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_root_item {
    pub inode: btrfs_inode_item,
    pub generation: __le64,
    pub root_dirid: __le64,
    pub bytenr: __le64,
    pub byte_limit: __le64,
    pub bytes_used: __le64,
    pub last_snapshot: __le64,
    pub flags: __le64,
    pub refs: __le32,
    pub drop_progress: btrfs_disk_key,
    pub drop_level: u8_,
    pub level: u8_,
    pub generation_v2: __le64,
    pub uuid: [u8_; 16usize],
    pub parent_uuid: [u8_; 16usize],
    pub received_uuid: [u8_; 16usize],
    pub ctransid: __le64,
    pub otransid: __le64,
    pub stransid: __le64,
    pub rtransid: __le64,
    pub ctime: btrfs_timespec,
    pub otime: btrfs_timespec,
    pub stime: btrfs_timespec,
    pub rtime: btrfs_timespec,
    pub global_tree_id: __le64,
    pub reserved: [__le64; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_root_item"][::std::mem::size_of::<btrfs_root_item>() - 439usize];
    ["Alignment of btrfs_root_item"][::std::mem::align_of::<btrfs_root_item>() - 1usize];
    ["Offset of field: btrfs_root_item::inode"]
        [::std::mem::offset_of!(btrfs_root_item, inode) - 0usize];
    ["Offset of field: btrfs_root_item::generation"]
        [::std::mem::offset_of!(btrfs_root_item, generation) - 160usize];
    ["Offset of field: btrfs_root_item::root_dirid"]
        [::std::mem::offset_of!(btrfs_root_item, root_dirid) - 168usize];
    ["Offset of field: btrfs_root_item::bytenr"]
        [::std::mem::offset_of!(btrfs_root_item, bytenr) - 176usize];
    ["Offset of field: btrfs_root_item::byte_limit"]
        [::std::mem::offset_of!(btrfs_root_item, byte_limit) - 184usize];
    ["Offset of field: btrfs_root_item::bytes_used"]
        [::std::mem::offset_of!(btrfs_root_item, bytes_used) - 192usize];
    ["Offset of field: btrfs_root_item::last_snapshot"]
        [::std::mem::offset_of!(btrfs_root_item, last_snapshot) - 200usize];
    ["Offset of field: btrfs_root_item::flags"]
        [::std::mem::offset_of!(btrfs_root_item, flags) - 208usize];
    ["Offset of field: btrfs_root_item::refs"]
        [::std::mem::offset_of!(btrfs_root_item, refs) - 216usize];
    ["Offset of field: btrfs_root_item::drop_progress"]
        [::std::mem::offset_of!(btrfs_root_item, drop_progress) - 220usize];
    ["Offset of field: btrfs_root_item::drop_level"]
        [::std::mem::offset_of!(btrfs_root_item, drop_level) - 237usize];
    ["Offset of field: btrfs_root_item::level"]
        [::std::mem::offset_of!(btrfs_root_item, level) - 238usize];
    ["Offset of field: btrfs_root_item::generation_v2"]
        [::std::mem::offset_of!(btrfs_root_item, generation_v2) - 239usize];
    ["Offset of field: btrfs_root_item::uuid"]
        [::std::mem::offset_of!(btrfs_root_item, uuid) - 247usize];
    ["Offset of field: btrfs_root_item::parent_uuid"]
        [::std::mem::offset_of!(btrfs_root_item, parent_uuid) - 263usize];
    ["Offset of field: btrfs_root_item::received_uuid"]
        [::std::mem::offset_of!(btrfs_root_item, received_uuid) - 279usize];
    ["Offset of field: btrfs_root_item::ctransid"]
        [::std::mem::offset_of!(btrfs_root_item, ctransid) - 295usize];
    ["Offset of field: btrfs_root_item::otransid"]
        [::std::mem::offset_of!(btrfs_root_item, otransid) - 303usize];
    ["Offset of field: btrfs_root_item::stransid"]
        [::std::mem::offset_of!(btrfs_root_item, stransid) - 311usize];
    ["Offset of field: btrfs_root_item::rtransid"]
        [::std::mem::offset_of!(btrfs_root_item, rtransid) - 319usize];
    ["Offset of field: btrfs_root_item::ctime"]
        [::std::mem::offset_of!(btrfs_root_item, ctime) - 327usize];
    ["Offset of field: btrfs_root_item::otime"]
        [::std::mem::offset_of!(btrfs_root_item, otime) - 339usize];
    ["Offset of field: btrfs_root_item::stime"]
        [::std::mem::offset_of!(btrfs_root_item, stime) - 351usize];
    ["Offset of field: btrfs_root_item::rtime"]
        [::std::mem::offset_of!(btrfs_root_item, rtime) - 363usize];
    ["Offset of field: btrfs_root_item::global_tree_id"]
        [::std::mem::offset_of!(btrfs_root_item, global_tree_id) - 375usize];
    ["Offset of field: btrfs_root_item::reserved"]
        [::std::mem::offset_of!(btrfs_root_item, reserved) - 383usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_root_ref {
    pub dirid: __le64,
    pub sequence: __le64,
    pub name_len: __le16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_root_ref"][::std::mem::size_of::<btrfs_root_ref>() - 18usize];
    ["Alignment of btrfs_root_ref"][::std::mem::align_of::<btrfs_root_ref>() - 1usize];
    ["Offset of field: btrfs_root_ref::dirid"]
        [::std::mem::offset_of!(btrfs_root_ref, dirid) - 0usize];
    ["Offset of field: btrfs_root_ref::sequence"]
        [::std::mem::offset_of!(btrfs_root_ref, sequence) - 8usize];
    ["Offset of field: btrfs_root_ref::name_len"]
        [::std::mem::offset_of!(btrfs_root_ref, name_len) - 16usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct btrfs_disk_balance_args {
    pub profiles: __le64,
    pub __bindgen_anon_1: btrfs_disk_balance_args__bindgen_ty_1,
    pub devid: __le64,
    pub pstart: __le64,
    pub pend: __le64,
    pub vstart: __le64,
    pub vend: __le64,
    pub target: __le64,
    pub flags: __le64,
    pub __bindgen_anon_2: btrfs_disk_balance_args__bindgen_ty_2,
    pub stripes_min: __le32,
    pub stripes_max: __le32,
    pub unused: [__le64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_disk_balance_args__bindgen_ty_1 {
    pub usage: __le64,
    pub __bindgen_anon_1: btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1 {
    pub usage_min: __le32,
    pub usage_max: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1::usage_min"][::std::mem::offset_of!(
        btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1,
        usage_min
    ) - 0usize];
    ["Offset of field: btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1::usage_max"][::std::mem::offset_of!(
        btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1,
        usage_max
    ) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_disk_balance_args__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_1>() - 8usize];
    ["Alignment of btrfs_disk_balance_args__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_1>() - 8usize];
    ["Offset of field: btrfs_disk_balance_args__bindgen_ty_1::usage"]
        [::std::mem::offset_of!(btrfs_disk_balance_args__bindgen_ty_1, usage) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_disk_balance_args__bindgen_ty_2 {
    pub limit: __le64,
    pub __bindgen_anon_1: btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1 {
    pub limit_min: __le32,
    pub limit_max: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Offset of field: btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1::limit_min"][::std::mem::offset_of!(
        btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1,
        limit_min
    ) - 0usize];
    ["Offset of field: btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1::limit_max"][::std::mem::offset_of!(
        btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1,
        limit_max
    ) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_disk_balance_args__bindgen_ty_2"]
        [::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_2>() - 8usize];
    ["Alignment of btrfs_disk_balance_args__bindgen_ty_2"]
        [::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_2>() - 8usize];
    ["Offset of field: btrfs_disk_balance_args__bindgen_ty_2::limit"]
        [::std::mem::offset_of!(btrfs_disk_balance_args__bindgen_ty_2, limit) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_disk_balance_args"]
        [::std::mem::size_of::<btrfs_disk_balance_args>() - 136usize];
    ["Alignment of btrfs_disk_balance_args"]
        [::std::mem::align_of::<btrfs_disk_balance_args>() - 1usize];
    ["Offset of field: btrfs_disk_balance_args::profiles"]
        [::std::mem::offset_of!(btrfs_disk_balance_args, profiles) - 0usize];
    ["Offset of field: btrfs_disk_balance_args::devid"]
        [::std::mem::offset_of!(btrfs_disk_balance_args, devid) - 16usize];
    ["Offset of field: btrfs_disk_balance_args::pstart"]
        [::std::mem::offset_of!(btrfs_disk_balance_args, pstart) - 24usize];
    ["Offset of field: btrfs_disk_balance_args::pend"]
        [::std::mem::offset_of!(btrfs_disk_balance_args, pend) - 32usize];
    ["Offset of field: btrfs_disk_balance_args::vstart"]
        [::std::mem::offset_of!(btrfs_disk_balance_args, vstart) - 40usize];
    ["Offset of field: btrfs_disk_balance_args::vend"]
        [::std::mem::offset_of!(btrfs_disk_balance_args, vend) - 48usize];
    ["Offset of field: btrfs_disk_balance_args::target"]
        [::std::mem::offset_of!(btrfs_disk_balance_args, target) - 56usize];
    ["Offset of field: btrfs_disk_balance_args::flags"]
        [::std::mem::offset_of!(btrfs_disk_balance_args, flags) - 64usize];
    ["Offset of field: btrfs_disk_balance_args::stripes_min"]
        [::std::mem::offset_of!(btrfs_disk_balance_args, stripes_min) - 80usize];
    ["Offset of field: btrfs_disk_balance_args::stripes_max"]
        [::std::mem::offset_of!(btrfs_disk_balance_args, stripes_max) - 84usize];
    ["Offset of field: btrfs_disk_balance_args::unused"]
        [::std::mem::offset_of!(btrfs_disk_balance_args, unused) - 88usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct btrfs_balance_item {
    pub flags: __le64,
    pub data: btrfs_disk_balance_args,
    pub meta: btrfs_disk_balance_args,
    pub sys: btrfs_disk_balance_args,
    pub unused: [__le64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_balance_item"][::std::mem::size_of::<btrfs_balance_item>() - 448usize];
    ["Alignment of btrfs_balance_item"][::std::mem::align_of::<btrfs_balance_item>() - 1usize];
    ["Offset of field: btrfs_balance_item::flags"]
        [::std::mem::offset_of!(btrfs_balance_item, flags) - 0usize];
    ["Offset of field: btrfs_balance_item::data"]
        [::std::mem::offset_of!(btrfs_balance_item, data) - 8usize];
    ["Offset of field: btrfs_balance_item::meta"]
        [::std::mem::offset_of!(btrfs_balance_item, meta) - 144usize];
    ["Offset of field: btrfs_balance_item::sys"]
        [::std::mem::offset_of!(btrfs_balance_item, sys) - 280usize];
    ["Offset of field: btrfs_balance_item::unused"]
        [::std::mem::offset_of!(btrfs_balance_item, unused) - 416usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_file_extent_item {
    pub generation: __le64,
    pub ram_bytes: __le64,
    pub compression: u8_,
    pub encryption: u8_,
    pub other_encoding: __le16,
    pub type_: u8_,
    pub disk_bytenr: __le64,
    pub disk_num_bytes: __le64,
    pub offset: __le64,
    pub num_bytes: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_file_extent_item"][::std::mem::size_of::<btrfs_file_extent_item>() - 53usize];
    ["Alignment of btrfs_file_extent_item"]
        [::std::mem::align_of::<btrfs_file_extent_item>() - 1usize];
    ["Offset of field: btrfs_file_extent_item::generation"]
        [::std::mem::offset_of!(btrfs_file_extent_item, generation) - 0usize];
    ["Offset of field: btrfs_file_extent_item::ram_bytes"]
        [::std::mem::offset_of!(btrfs_file_extent_item, ram_bytes) - 8usize];
    ["Offset of field: btrfs_file_extent_item::compression"]
        [::std::mem::offset_of!(btrfs_file_extent_item, compression) - 16usize];
    ["Offset of field: btrfs_file_extent_item::encryption"]
        [::std::mem::offset_of!(btrfs_file_extent_item, encryption) - 17usize];
    ["Offset of field: btrfs_file_extent_item::other_encoding"]
        [::std::mem::offset_of!(btrfs_file_extent_item, other_encoding) - 18usize];
    ["Offset of field: btrfs_file_extent_item::type_"]
        [::std::mem::offset_of!(btrfs_file_extent_item, type_) - 20usize];
    ["Offset of field: btrfs_file_extent_item::disk_bytenr"]
        [::std::mem::offset_of!(btrfs_file_extent_item, disk_bytenr) - 21usize];
    ["Offset of field: btrfs_file_extent_item::disk_num_bytes"]
        [::std::mem::offset_of!(btrfs_file_extent_item, disk_num_bytes) - 29usize];
    ["Offset of field: btrfs_file_extent_item::offset"]
        [::std::mem::offset_of!(btrfs_file_extent_item, offset) - 37usize];
    ["Offset of field: btrfs_file_extent_item::num_bytes"]
        [::std::mem::offset_of!(btrfs_file_extent_item, num_bytes) - 45usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_dev_stats_item {
    pub values: [__le64; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_dev_stats_item"][::std::mem::size_of::<btrfs_dev_stats_item>() - 40usize];
    ["Alignment of btrfs_dev_stats_item"][::std::mem::align_of::<btrfs_dev_stats_item>() - 1usize];
    ["Offset of field: btrfs_dev_stats_item::values"]
        [::std::mem::offset_of!(btrfs_dev_stats_item, values) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_csum_item {
    pub csum: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_csum_item"][::std::mem::size_of::<btrfs_csum_item>() - 1usize];
    ["Alignment of btrfs_csum_item"][::std::mem::align_of::<btrfs_csum_item>() - 1usize];
    ["Offset of field: btrfs_csum_item::csum"]
        [::std::mem::offset_of!(btrfs_csum_item, csum) - 0usize];
};
pub const btrfs_raid_types_BTRFS_RAID_RAID10: btrfs_raid_types = 0;
pub const btrfs_raid_types_BTRFS_RAID_RAID1: btrfs_raid_types = 1;
pub const btrfs_raid_types_BTRFS_RAID_DUP: btrfs_raid_types = 2;
pub const btrfs_raid_types_BTRFS_RAID_RAID0: btrfs_raid_types = 3;
pub const btrfs_raid_types_BTRFS_RAID_SINGLE: btrfs_raid_types = 4;
pub const btrfs_raid_types_BTRFS_RAID_RAID5: btrfs_raid_types = 5;
pub const btrfs_raid_types_BTRFS_RAID_RAID6: btrfs_raid_types = 6;
pub const btrfs_raid_types_BTRFS_RAID_RAID1C3: btrfs_raid_types = 7;
pub const btrfs_raid_types_BTRFS_RAID_RAID1C4: btrfs_raid_types = 8;
pub const btrfs_raid_types_BTRFS_NR_RAID_TYPES: btrfs_raid_types = 9;
pub type btrfs_raid_types = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_qgroup_status_item {
    pub version: __le64,
    pub generation: __le64,
    pub flags: __le64,
    pub rescan: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_qgroup_status_item"]
        [::std::mem::size_of::<btrfs_qgroup_status_item>() - 32usize];
    ["Alignment of btrfs_qgroup_status_item"]
        [::std::mem::align_of::<btrfs_qgroup_status_item>() - 1usize];
    ["Offset of field: btrfs_qgroup_status_item::version"]
        [::std::mem::offset_of!(btrfs_qgroup_status_item, version) - 0usize];
    ["Offset of field: btrfs_qgroup_status_item::generation"]
        [::std::mem::offset_of!(btrfs_qgroup_status_item, generation) - 8usize];
    ["Offset of field: btrfs_qgroup_status_item::flags"]
        [::std::mem::offset_of!(btrfs_qgroup_status_item, flags) - 16usize];
    ["Offset of field: btrfs_qgroup_status_item::rescan"]
        [::std::mem::offset_of!(btrfs_qgroup_status_item, rescan) - 24usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_block_group_item {
    pub used: __le64,
    pub chunk_objectid: __le64,
    pub flags: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_block_group_item"][::std::mem::size_of::<btrfs_block_group_item>() - 24usize];
    ["Alignment of btrfs_block_group_item"]
        [::std::mem::align_of::<btrfs_block_group_item>() - 1usize];
    ["Offset of field: btrfs_block_group_item::used"]
        [::std::mem::offset_of!(btrfs_block_group_item, used) - 0usize];
    ["Offset of field: btrfs_block_group_item::chunk_objectid"]
        [::std::mem::offset_of!(btrfs_block_group_item, chunk_objectid) - 8usize];
    ["Offset of field: btrfs_block_group_item::flags"]
        [::std::mem::offset_of!(btrfs_block_group_item, flags) - 16usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_free_space_info {
    pub extent_count: __le32,
    pub flags: __le32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_free_space_info"][::std::mem::size_of::<btrfs_free_space_info>() - 8usize];
    ["Alignment of btrfs_free_space_info"]
        [::std::mem::align_of::<btrfs_free_space_info>() - 1usize];
    ["Offset of field: btrfs_free_space_info::extent_count"]
        [::std::mem::offset_of!(btrfs_free_space_info, extent_count) - 0usize];
    ["Offset of field: btrfs_free_space_info::flags"]
        [::std::mem::offset_of!(btrfs_free_space_info, flags) - 4usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_qgroup_info_item {
    pub generation: __le64,
    pub referenced: __le64,
    pub referenced_compressed: __le64,
    pub exclusive: __le64,
    pub exclusive_compressed: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_qgroup_info_item"][::std::mem::size_of::<btrfs_qgroup_info_item>() - 40usize];
    ["Alignment of btrfs_qgroup_info_item"]
        [::std::mem::align_of::<btrfs_qgroup_info_item>() - 1usize];
    ["Offset of field: btrfs_qgroup_info_item::generation"]
        [::std::mem::offset_of!(btrfs_qgroup_info_item, generation) - 0usize];
    ["Offset of field: btrfs_qgroup_info_item::referenced"]
        [::std::mem::offset_of!(btrfs_qgroup_info_item, referenced) - 8usize];
    ["Offset of field: btrfs_qgroup_info_item::referenced_compressed"]
        [::std::mem::offset_of!(btrfs_qgroup_info_item, referenced_compressed) - 16usize];
    ["Offset of field: btrfs_qgroup_info_item::exclusive"]
        [::std::mem::offset_of!(btrfs_qgroup_info_item, exclusive) - 24usize];
    ["Offset of field: btrfs_qgroup_info_item::exclusive_compressed"]
        [::std::mem::offset_of!(btrfs_qgroup_info_item, exclusive_compressed) - 32usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_qgroup_limit_item {
    pub flags: __le64,
    pub max_referenced: __le64,
    pub max_exclusive: __le64,
    pub rsv_referenced: __le64,
    pub rsv_exclusive: __le64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_qgroup_limit_item"][::std::mem::size_of::<btrfs_qgroup_limit_item>() - 40usize];
    ["Alignment of btrfs_qgroup_limit_item"]
        [::std::mem::align_of::<btrfs_qgroup_limit_item>() - 1usize];
    ["Offset of field: btrfs_qgroup_limit_item::flags"]
        [::std::mem::offset_of!(btrfs_qgroup_limit_item, flags) - 0usize];
    ["Offset of field: btrfs_qgroup_limit_item::max_referenced"]
        [::std::mem::offset_of!(btrfs_qgroup_limit_item, max_referenced) - 8usize];
    ["Offset of field: btrfs_qgroup_limit_item::max_exclusive"]
        [::std::mem::offset_of!(btrfs_qgroup_limit_item, max_exclusive) - 16usize];
    ["Offset of field: btrfs_qgroup_limit_item::rsv_referenced"]
        [::std::mem::offset_of!(btrfs_qgroup_limit_item, rsv_referenced) - 24usize];
    ["Offset of field: btrfs_qgroup_limit_item::rsv_exclusive"]
        [::std::mem::offset_of!(btrfs_qgroup_limit_item, rsv_exclusive) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_space_info {
    pub flags: u64_,
    pub total_bytes: u64_,
    pub bytes_used: u64_,
    pub bytes_pinned: u64_,
    pub bytes_reserved: u64_,
    pub full: ::std::os::raw::c_int,
    pub list: list_head_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_space_info"][::std::mem::size_of::<btrfs_space_info>() - 64usize];
    ["Alignment of btrfs_space_info"][::std::mem::align_of::<btrfs_space_info>() - 8usize];
    ["Offset of field: btrfs_space_info::flags"]
        [::std::mem::offset_of!(btrfs_space_info, flags) - 0usize];
    ["Offset of field: btrfs_space_info::total_bytes"]
        [::std::mem::offset_of!(btrfs_space_info, total_bytes) - 8usize];
    ["Offset of field: btrfs_space_info::bytes_used"]
        [::std::mem::offset_of!(btrfs_space_info, bytes_used) - 16usize];
    ["Offset of field: btrfs_space_info::bytes_pinned"]
        [::std::mem::offset_of!(btrfs_space_info, bytes_pinned) - 24usize];
    ["Offset of field: btrfs_space_info::bytes_reserved"]
        [::std::mem::offset_of!(btrfs_space_info, bytes_reserved) - 32usize];
    ["Offset of field: btrfs_space_info::full"]
        [::std::mem::offset_of!(btrfs_space_info, full) - 40usize];
    ["Offset of field: btrfs_space_info::list"]
        [::std::mem::offset_of!(btrfs_space_info, list) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_block_group {
    pub space_info: *mut btrfs_space_info,
    pub free_space_ctl: *mut btrfs_free_space_ctl,
    pub start: u64_,
    pub length: u64_,
    pub used: u64_,
    pub bytes_super: u64_,
    pub pinned: u64_,
    pub flags: u64_,
    pub cached: ::std::os::raw::c_int,
    pub ro: ::std::os::raw::c_int,
    pub bitmap_high_thresh: u32_,
    pub bitmap_low_thresh: u32_,
    pub cache_node: rb_node,
    pub dirty_list: list_head_,
    pub alloc_offset: u64_,
    pub write_offset: u64_,
    pub global_root_id: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_block_group"][::std::mem::size_of::<btrfs_block_group>() - 144usize];
    ["Alignment of btrfs_block_group"][::std::mem::align_of::<btrfs_block_group>() - 8usize];
    ["Offset of field: btrfs_block_group::space_info"]
        [::std::mem::offset_of!(btrfs_block_group, space_info) - 0usize];
    ["Offset of field: btrfs_block_group::free_space_ctl"]
        [::std::mem::offset_of!(btrfs_block_group, free_space_ctl) - 8usize];
    ["Offset of field: btrfs_block_group::start"]
        [::std::mem::offset_of!(btrfs_block_group, start) - 16usize];
    ["Offset of field: btrfs_block_group::length"]
        [::std::mem::offset_of!(btrfs_block_group, length) - 24usize];
    ["Offset of field: btrfs_block_group::used"]
        [::std::mem::offset_of!(btrfs_block_group, used) - 32usize];
    ["Offset of field: btrfs_block_group::bytes_super"]
        [::std::mem::offset_of!(btrfs_block_group, bytes_super) - 40usize];
    ["Offset of field: btrfs_block_group::pinned"]
        [::std::mem::offset_of!(btrfs_block_group, pinned) - 48usize];
    ["Offset of field: btrfs_block_group::flags"]
        [::std::mem::offset_of!(btrfs_block_group, flags) - 56usize];
    ["Offset of field: btrfs_block_group::cached"]
        [::std::mem::offset_of!(btrfs_block_group, cached) - 64usize];
    ["Offset of field: btrfs_block_group::ro"]
        [::std::mem::offset_of!(btrfs_block_group, ro) - 68usize];
    ["Offset of field: btrfs_block_group::bitmap_high_thresh"]
        [::std::mem::offset_of!(btrfs_block_group, bitmap_high_thresh) - 72usize];
    ["Offset of field: btrfs_block_group::bitmap_low_thresh"]
        [::std::mem::offset_of!(btrfs_block_group, bitmap_low_thresh) - 76usize];
    ["Offset of field: btrfs_block_group::cache_node"]
        [::std::mem::offset_of!(btrfs_block_group, cache_node) - 80usize];
    ["Offset of field: btrfs_block_group::dirty_list"]
        [::std::mem::offset_of!(btrfs_block_group, dirty_list) - 104usize];
    ["Offset of field: btrfs_block_group::alloc_offset"]
        [::std::mem::offset_of!(btrfs_block_group, alloc_offset) - 120usize];
    ["Offset of field: btrfs_block_group::write_offset"]
        [::std::mem::offset_of!(btrfs_block_group, write_offset) - 128usize];
    ["Offset of field: btrfs_block_group::global_root_id"]
        [::std::mem::offset_of!(btrfs_block_group, global_root_id) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_fs_devices {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btrfs_fs_info {
    pub chunk_tree_uuid: [u8_; 16usize],
    pub new_chunk_tree_uuid: *mut u8_,
    pub fs_root: *mut btrfs_root,
    pub tree_root: *mut btrfs_root,
    pub chunk_root: *mut btrfs_root,
    pub dev_root: *mut btrfs_root,
    pub quota_root: *mut btrfs_root,
    pub uuid_root: *mut btrfs_root,
    pub block_group_root: *mut btrfs_root,
    pub global_roots_tree: rb_root,
    pub fs_root_tree: rb_root,
    pub log_root_tree: *mut btrfs_root,
    pub extent_cache: extent_io_tree,
    pub free_space_cache: extent_io_tree,
    pub pinned_extents: extent_io_tree,
    pub extent_ins: extent_io_tree,
    pub excluded_extents: *mut extent_io_tree,
    pub block_group_cache_tree: rb_root,
    pub mapping_tree: btrfs_mapping_tree,
    pub generation: u64_,
    pub last_trans_committed: u64_,
    pub avail_data_alloc_bits: u64_,
    pub avail_metadata_alloc_bits: u64_,
    pub avail_system_alloc_bits: u64_,
    pub data_alloc_profile: u64_,
    pub metadata_alloc_profile: u64_,
    pub system_alloc_profile: u64_,
    pub running_transaction: *mut btrfs_trans_handle,
    pub super_copy: *mut btrfs_super_block,
    pub super_bytenr: u64_,
    pub total_pinned: u64_,
    pub nr_global_roots: u64_,
    pub dirty_cowonly_roots: list_head_,
    pub recow_ebs: list_head_,
    pub fs_devices: *mut btrfs_fs_devices,
    pub space_info: list_head_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub transaction_aborted: ::std::os::raw::c_int,
    pub force_csum_type: ::std::os::raw::c_int,
    pub free_extent_hook: ::std::option::Option<
        unsafe extern "C" fn(
            bytenr: u64_,
            num_bytes: u64_,
            parent: u64_,
            root_objectid: u64_,
            owner: u64_,
            offset: u64_,
            refs_to_drop: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsck_extent_cache: *mut cache_tree,
    pub corrupt_blocks: *mut cache_tree,
    pub nodesize: u32_,
    pub sectorsize: u32_,
    pub stripesize: u32_,
    pub leaf_data_size: u32_,
    pub csum_type: u16_,
    pub csum_size: u16_,
    pub __bindgen_anon_1: btrfs_fs_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_fs_info__bindgen_ty_1 {
    pub zone_size: u64_,
    pub zoned: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_fs_info__bindgen_ty_1"]
        [::std::mem::size_of::<btrfs_fs_info__bindgen_ty_1>() - 8usize];
    ["Alignment of btrfs_fs_info__bindgen_ty_1"]
        [::std::mem::align_of::<btrfs_fs_info__bindgen_ty_1>() - 8usize];
    ["Offset of field: btrfs_fs_info__bindgen_ty_1::zone_size"]
        [::std::mem::offset_of!(btrfs_fs_info__bindgen_ty_1, zone_size) - 0usize];
    ["Offset of field: btrfs_fs_info__bindgen_ty_1::zoned"]
        [::std::mem::offset_of!(btrfs_fs_info__bindgen_ty_1, zoned) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_fs_info"][::std::mem::size_of::<btrfs_fs_info>() - 552usize];
    ["Alignment of btrfs_fs_info"][::std::mem::align_of::<btrfs_fs_info>() - 8usize];
    ["Offset of field: btrfs_fs_info::chunk_tree_uuid"]
        [::std::mem::offset_of!(btrfs_fs_info, chunk_tree_uuid) - 0usize];
    ["Offset of field: btrfs_fs_info::new_chunk_tree_uuid"]
        [::std::mem::offset_of!(btrfs_fs_info, new_chunk_tree_uuid) - 16usize];
    ["Offset of field: btrfs_fs_info::fs_root"]
        [::std::mem::offset_of!(btrfs_fs_info, fs_root) - 24usize];
    ["Offset of field: btrfs_fs_info::tree_root"]
        [::std::mem::offset_of!(btrfs_fs_info, tree_root) - 32usize];
    ["Offset of field: btrfs_fs_info::chunk_root"]
        [::std::mem::offset_of!(btrfs_fs_info, chunk_root) - 40usize];
    ["Offset of field: btrfs_fs_info::dev_root"]
        [::std::mem::offset_of!(btrfs_fs_info, dev_root) - 48usize];
    ["Offset of field: btrfs_fs_info::quota_root"]
        [::std::mem::offset_of!(btrfs_fs_info, quota_root) - 56usize];
    ["Offset of field: btrfs_fs_info::uuid_root"]
        [::std::mem::offset_of!(btrfs_fs_info, uuid_root) - 64usize];
    ["Offset of field: btrfs_fs_info::block_group_root"]
        [::std::mem::offset_of!(btrfs_fs_info, block_group_root) - 72usize];
    ["Offset of field: btrfs_fs_info::global_roots_tree"]
        [::std::mem::offset_of!(btrfs_fs_info, global_roots_tree) - 80usize];
    ["Offset of field: btrfs_fs_info::fs_root_tree"]
        [::std::mem::offset_of!(btrfs_fs_info, fs_root_tree) - 88usize];
    ["Offset of field: btrfs_fs_info::log_root_tree"]
        [::std::mem::offset_of!(btrfs_fs_info, log_root_tree) - 96usize];
    ["Offset of field: btrfs_fs_info::extent_cache"]
        [::std::mem::offset_of!(btrfs_fs_info, extent_cache) - 104usize];
    ["Offset of field: btrfs_fs_info::free_space_cache"]
        [::std::mem::offset_of!(btrfs_fs_info, free_space_cache) - 152usize];
    ["Offset of field: btrfs_fs_info::pinned_extents"]
        [::std::mem::offset_of!(btrfs_fs_info, pinned_extents) - 200usize];
    ["Offset of field: btrfs_fs_info::extent_ins"]
        [::std::mem::offset_of!(btrfs_fs_info, extent_ins) - 248usize];
    ["Offset of field: btrfs_fs_info::excluded_extents"]
        [::std::mem::offset_of!(btrfs_fs_info, excluded_extents) - 296usize];
    ["Offset of field: btrfs_fs_info::block_group_cache_tree"]
        [::std::mem::offset_of!(btrfs_fs_info, block_group_cache_tree) - 304usize];
    ["Offset of field: btrfs_fs_info::mapping_tree"]
        [::std::mem::offset_of!(btrfs_fs_info, mapping_tree) - 312usize];
    ["Offset of field: btrfs_fs_info::generation"]
        [::std::mem::offset_of!(btrfs_fs_info, generation) - 320usize];
    ["Offset of field: btrfs_fs_info::last_trans_committed"]
        [::std::mem::offset_of!(btrfs_fs_info, last_trans_committed) - 328usize];
    ["Offset of field: btrfs_fs_info::avail_data_alloc_bits"]
        [::std::mem::offset_of!(btrfs_fs_info, avail_data_alloc_bits) - 336usize];
    ["Offset of field: btrfs_fs_info::avail_metadata_alloc_bits"]
        [::std::mem::offset_of!(btrfs_fs_info, avail_metadata_alloc_bits) - 344usize];
    ["Offset of field: btrfs_fs_info::avail_system_alloc_bits"]
        [::std::mem::offset_of!(btrfs_fs_info, avail_system_alloc_bits) - 352usize];
    ["Offset of field: btrfs_fs_info::data_alloc_profile"]
        [::std::mem::offset_of!(btrfs_fs_info, data_alloc_profile) - 360usize];
    ["Offset of field: btrfs_fs_info::metadata_alloc_profile"]
        [::std::mem::offset_of!(btrfs_fs_info, metadata_alloc_profile) - 368usize];
    ["Offset of field: btrfs_fs_info::system_alloc_profile"]
        [::std::mem::offset_of!(btrfs_fs_info, system_alloc_profile) - 376usize];
    ["Offset of field: btrfs_fs_info::running_transaction"]
        [::std::mem::offset_of!(btrfs_fs_info, running_transaction) - 384usize];
    ["Offset of field: btrfs_fs_info::super_copy"]
        [::std::mem::offset_of!(btrfs_fs_info, super_copy) - 392usize];
    ["Offset of field: btrfs_fs_info::super_bytenr"]
        [::std::mem::offset_of!(btrfs_fs_info, super_bytenr) - 400usize];
    ["Offset of field: btrfs_fs_info::total_pinned"]
        [::std::mem::offset_of!(btrfs_fs_info, total_pinned) - 408usize];
    ["Offset of field: btrfs_fs_info::nr_global_roots"]
        [::std::mem::offset_of!(btrfs_fs_info, nr_global_roots) - 416usize];
    ["Offset of field: btrfs_fs_info::dirty_cowonly_roots"]
        [::std::mem::offset_of!(btrfs_fs_info, dirty_cowonly_roots) - 424usize];
    ["Offset of field: btrfs_fs_info::recow_ebs"]
        [::std::mem::offset_of!(btrfs_fs_info, recow_ebs) - 440usize];
    ["Offset of field: btrfs_fs_info::fs_devices"]
        [::std::mem::offset_of!(btrfs_fs_info, fs_devices) - 456usize];
    ["Offset of field: btrfs_fs_info::space_info"]
        [::std::mem::offset_of!(btrfs_fs_info, space_info) - 464usize];
    ["Offset of field: btrfs_fs_info::transaction_aborted"]
        [::std::mem::offset_of!(btrfs_fs_info, transaction_aborted) - 484usize];
    ["Offset of field: btrfs_fs_info::force_csum_type"]
        [::std::mem::offset_of!(btrfs_fs_info, force_csum_type) - 488usize];
    ["Offset of field: btrfs_fs_info::free_extent_hook"]
        [::std::mem::offset_of!(btrfs_fs_info, free_extent_hook) - 496usize];
    ["Offset of field: btrfs_fs_info::fsck_extent_cache"]
        [::std::mem::offset_of!(btrfs_fs_info, fsck_extent_cache) - 504usize];
    ["Offset of field: btrfs_fs_info::corrupt_blocks"]
        [::std::mem::offset_of!(btrfs_fs_info, corrupt_blocks) - 512usize];
    ["Offset of field: btrfs_fs_info::nodesize"]
        [::std::mem::offset_of!(btrfs_fs_info, nodesize) - 520usize];
    ["Offset of field: btrfs_fs_info::sectorsize"]
        [::std::mem::offset_of!(btrfs_fs_info, sectorsize) - 524usize];
    ["Offset of field: btrfs_fs_info::stripesize"]
        [::std::mem::offset_of!(btrfs_fs_info, stripesize) - 528usize];
    ["Offset of field: btrfs_fs_info::leaf_data_size"]
        [::std::mem::offset_of!(btrfs_fs_info, leaf_data_size) - 532usize];
    ["Offset of field: btrfs_fs_info::csum_type"]
        [::std::mem::offset_of!(btrfs_fs_info, csum_type) - 536usize];
    ["Offset of field: btrfs_fs_info::csum_size"]
        [::std::mem::offset_of!(btrfs_fs_info, csum_size) - 538usize];
};
impl btrfs_fs_info {
    #[inline]
    pub fn system_allocs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_system_allocs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn readonly(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_readonly(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn on_restoring(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_on_restoring(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_chunk_recover(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_chunk_recover(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn quota_enabled(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_quota_enabled(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn suppress_check_block_errors(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_suppress_check_block_errors(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_fsid_mismatch(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignore_fsid_mismatch(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skip_csum_check(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_csum_check(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore_chunk_tree_error(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignore_chunk_tree_error(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn avoid_meta_chunk_alloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_avoid_meta_chunk_alloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn avoid_sys_chunk_alloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_avoid_sys_chunk_alloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn finalize_on_close(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_finalize_on_close(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hide_names(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hide_names(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_transid_mismatch(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_transid_mismatch(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        system_allocs: ::std::os::raw::c_uint,
        readonly: ::std::os::raw::c_uint,
        on_restoring: ::std::os::raw::c_uint,
        is_chunk_recover: ::std::os::raw::c_uint,
        quota_enabled: ::std::os::raw::c_uint,
        suppress_check_block_errors: ::std::os::raw::c_uint,
        ignore_fsid_mismatch: ::std::os::raw::c_uint,
        skip_csum_check: ::std::os::raw::c_uint,
        ignore_chunk_tree_error: ::std::os::raw::c_uint,
        avoid_meta_chunk_alloc: ::std::os::raw::c_uint,
        avoid_sys_chunk_alloc: ::std::os::raw::c_uint,
        finalize_on_close: ::std::os::raw::c_uint,
        hide_names: ::std::os::raw::c_uint,
        allow_transid_mismatch: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let system_allocs: u32 = unsafe { ::std::mem::transmute(system_allocs) };
            system_allocs as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let readonly: u32 = unsafe { ::std::mem::transmute(readonly) };
            readonly as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let on_restoring: u32 = unsafe { ::std::mem::transmute(on_restoring) };
            on_restoring as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_chunk_recover: u32 = unsafe { ::std::mem::transmute(is_chunk_recover) };
            is_chunk_recover as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let quota_enabled: u32 = unsafe { ::std::mem::transmute(quota_enabled) };
            quota_enabled as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let suppress_check_block_errors: u32 =
                unsafe { ::std::mem::transmute(suppress_check_block_errors) };
            suppress_check_block_errors as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ignore_fsid_mismatch: u32 = unsafe { ::std::mem::transmute(ignore_fsid_mismatch) };
            ignore_fsid_mismatch as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let skip_csum_check: u32 = unsafe { ::std::mem::transmute(skip_csum_check) };
            skip_csum_check as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ignore_chunk_tree_error: u32 =
                unsafe { ::std::mem::transmute(ignore_chunk_tree_error) };
            ignore_chunk_tree_error as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let avoid_meta_chunk_alloc: u32 =
                unsafe { ::std::mem::transmute(avoid_meta_chunk_alloc) };
            avoid_meta_chunk_alloc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let avoid_sys_chunk_alloc: u32 =
                unsafe { ::std::mem::transmute(avoid_sys_chunk_alloc) };
            avoid_sys_chunk_alloc as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let finalize_on_close: u32 = unsafe { ::std::mem::transmute(finalize_on_close) };
            finalize_on_close as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let hide_names: u32 = unsafe { ::std::mem::transmute(hide_names) };
            hide_names as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let allow_transid_mismatch: u32 =
                unsafe { ::std::mem::transmute(allow_transid_mismatch) };
            allow_transid_mismatch as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_root {
    pub node: *mut extent_buffer,
    pub commit_root: *mut extent_buffer,
    pub root_item: btrfs_root_item,
    pub root_key: btrfs_key,
    pub fs_info: *mut btrfs_fs_info,
    pub objectid: u64_,
    pub last_trans: u64_,
    pub ref_cows: ::std::os::raw::c_int,
    pub track_dirty: ::std::os::raw::c_int,
    pub type_: u32_,
    pub last_inode_alloc: u64_,
    pub unaligned_extent_recs: list_head_,
    pub dirty_list: list_head_,
    pub rb_node: rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btrfs_root"][::std::mem::size_of::<btrfs_root>() - 576usize];
    ["Alignment of btrfs_root"][::std::mem::align_of::<btrfs_root>() - 8usize];
    ["Offset of field: btrfs_root::node"][::std::mem::offset_of!(btrfs_root, node) - 0usize];
    ["Offset of field: btrfs_root::commit_root"]
        [::std::mem::offset_of!(btrfs_root, commit_root) - 8usize];
    ["Offset of field: btrfs_root::root_item"]
        [::std::mem::offset_of!(btrfs_root, root_item) - 16usize];
    ["Offset of field: btrfs_root::root_key"]
        [::std::mem::offset_of!(btrfs_root, root_key) - 455usize];
    ["Offset of field: btrfs_root::fs_info"]
        [::std::mem::offset_of!(btrfs_root, fs_info) - 472usize];
    ["Offset of field: btrfs_root::objectid"]
        [::std::mem::offset_of!(btrfs_root, objectid) - 480usize];
    ["Offset of field: btrfs_root::last_trans"]
        [::std::mem::offset_of!(btrfs_root, last_trans) - 488usize];
    ["Offset of field: btrfs_root::ref_cows"]
        [::std::mem::offset_of!(btrfs_root, ref_cows) - 496usize];
    ["Offset of field: btrfs_root::track_dirty"]
        [::std::mem::offset_of!(btrfs_root, track_dirty) - 500usize];
    ["Offset of field: btrfs_root::type_"][::std::mem::offset_of!(btrfs_root, type_) - 504usize];
    ["Offset of field: btrfs_root::last_inode_alloc"]
        [::std::mem::offset_of!(btrfs_root, last_inode_alloc) - 512usize];
    ["Offset of field: btrfs_root::unaligned_extent_recs"]
        [::std::mem::offset_of!(btrfs_root, unaligned_extent_recs) - 520usize];
    ["Offset of field: btrfs_root::dirty_list"]
        [::std::mem::offset_of!(btrfs_root, dirty_list) - 536usize];
    ["Offset of field: btrfs_root::rb_node"]
        [::std::mem::offset_of!(btrfs_root, rb_node) - 552usize];
};
extern "C" {
    pub fn read_extent_buffer(
        eb: *const extent_buffer,
        dst: *mut ::std::os::raw::c_void,
        start: ::std::os::raw::c_ulong,
        len: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn write_extent_buffer(
        eb: *mut extent_buffer,
        src: *const ::std::os::raw::c_void,
        start: ::std::os::raw::c_ulong,
        len: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn btrfs_del_items(
        trans: *mut btrfs_trans_handle,
        root: *mut btrfs_root,
        path: *mut btrfs_path,
        slot: ::std::os::raw::c_int,
        nr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn btrfs_insert_item(
        trans: *mut btrfs_trans_handle,
        root: *mut btrfs_root,
        key: *mut btrfs_key,
        data: *mut ::std::os::raw::c_void,
        data_size: u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn btrfs_insert_empty_items(
        trans: *mut btrfs_trans_handle,
        root: *mut btrfs_root,
        path: *mut btrfs_path,
        cpu_key: *mut btrfs_key,
        data_size: *mut u32_,
        nr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn btrfs_next_sibling_tree_block(
        fs_info: *mut btrfs_fs_info,
        path: *mut btrfs_path,
    ) -> ::std::os::raw::c_int;
}
pub const subvol_search_type_subvol_search_by_root_id: subvol_search_type = 0;
pub const subvol_search_type_subvol_search_by_uuid: subvol_search_type = 1;
pub const subvol_search_type_subvol_search_by_received_uuid: subvol_search_type = 2;
pub const subvol_search_type_subvol_search_by_path: subvol_search_type = 3;
pub type subvol_search_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct subvol_info {
    pub rb_root_id_node: rb_node,
    pub rb_local_node: rb_node,
    pub rb_received_node: rb_node,
    pub rb_path_node: rb_node,
    pub root_id: u64_,
    pub uuid: [u8_; 16usize],
    pub parent_uuid: [u8_; 16usize],
    pub received_uuid: [u8_; 16usize],
    pub ctransid: u64_,
    pub otransid: u64_,
    pub stransid: u64_,
    pub rtransid: u64_,
    pub path: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of subvol_info"][::std::mem::size_of::<subvol_info>() - 192usize];
    ["Alignment of subvol_info"][::std::mem::align_of::<subvol_info>() - 8usize];
    ["Offset of field: subvol_info::rb_root_id_node"]
        [::std::mem::offset_of!(subvol_info, rb_root_id_node) - 0usize];
    ["Offset of field: subvol_info::rb_local_node"]
        [::std::mem::offset_of!(subvol_info, rb_local_node) - 24usize];
    ["Offset of field: subvol_info::rb_received_node"]
        [::std::mem::offset_of!(subvol_info, rb_received_node) - 48usize];
    ["Offset of field: subvol_info::rb_path_node"]
        [::std::mem::offset_of!(subvol_info, rb_path_node) - 72usize];
    ["Offset of field: subvol_info::root_id"]
        [::std::mem::offset_of!(subvol_info, root_id) - 96usize];
    ["Offset of field: subvol_info::uuid"][::std::mem::offset_of!(subvol_info, uuid) - 104usize];
    ["Offset of field: subvol_info::parent_uuid"]
        [::std::mem::offset_of!(subvol_info, parent_uuid) - 120usize];
    ["Offset of field: subvol_info::received_uuid"]
        [::std::mem::offset_of!(subvol_info, received_uuid) - 136usize];
    ["Offset of field: subvol_info::ctransid"]
        [::std::mem::offset_of!(subvol_info, ctransid) - 152usize];
    ["Offset of field: subvol_info::otransid"]
        [::std::mem::offset_of!(subvol_info, otransid) - 160usize];
    ["Offset of field: subvol_info::stransid"]
        [::std::mem::offset_of!(subvol_info, stransid) - 168usize];
    ["Offset of field: subvol_info::rtransid"]
        [::std::mem::offset_of!(subvol_info, rtransid) - 176usize];
    ["Offset of field: subvol_info::path"][::std::mem::offset_of!(subvol_info, path) - 184usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct subvol_uuid_search {
    pub mnt_fd: ::std::os::raw::c_int,
    pub uuid_tree_existed: ::std::os::raw::c_int,
    pub root_id_subvols: rb_root,
    pub local_subvols: rb_root,
    pub received_subvols: rb_root,
    pub path_subvols: rb_root,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of subvol_uuid_search"][::std::mem::size_of::<subvol_uuid_search>() - 40usize];
    ["Alignment of subvol_uuid_search"][::std::mem::align_of::<subvol_uuid_search>() - 8usize];
    ["Offset of field: subvol_uuid_search::mnt_fd"]
        [::std::mem::offset_of!(subvol_uuid_search, mnt_fd) - 0usize];
    ["Offset of field: subvol_uuid_search::uuid_tree_existed"]
        [::std::mem::offset_of!(subvol_uuid_search, uuid_tree_existed) - 4usize];
    ["Offset of field: subvol_uuid_search::root_id_subvols"]
        [::std::mem::offset_of!(subvol_uuid_search, root_id_subvols) - 8usize];
    ["Offset of field: subvol_uuid_search::local_subvols"]
        [::std::mem::offset_of!(subvol_uuid_search, local_subvols) - 16usize];
    ["Offset of field: subvol_uuid_search::received_subvols"]
        [::std::mem::offset_of!(subvol_uuid_search, received_subvols) - 24usize];
    ["Offset of field: subvol_uuid_search::path_subvols"]
        [::std::mem::offset_of!(subvol_uuid_search, path_subvols) - 32usize];
};
extern "C" {
    pub fn subvol_uuid_search_init(
        mnt_fd: ::std::os::raw::c_int,
        s: *mut subvol_uuid_search,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn subvol_uuid_search(
        s: *mut subvol_uuid_search,
        root_id: u64_,
        uuid: *const u8_,
        transid: u64_,
        path: *const ::std::os::raw::c_char,
        type_: subvol_search_type,
    ) -> *mut subvol_info;
}
extern "C" {
    pub fn btrfs_subvolid_resolve(
        fd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        path_len: usize,
        subvol_id: u64_,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub _address: u8,
}
